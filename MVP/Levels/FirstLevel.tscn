[gd_scene load_steps=88 format=2]

[ext_resource path="res://Environment/Blocks/Forest/TileSets/Tile Pack/Grass Tile Pack/Grass Tile Pack 333p.png" type="Texture" id=1]
[ext_resource path="res://Abstract/Checkpoint/Checkpoint.tscn" type="PackedScene" id=2]
[ext_resource path="res://Environment/Blocks/Forest/TileSets/ForestTileMap.tscn" type="PackedScene" id=3]
[ext_resource path="res://Environment/Backgrounds/Forest Backgrounds/Start Background/Start Background 720p.png" type="Texture" id=4]
[ext_resource path="res://Levels/FirstLevel.gd" type="Script" id=5]
[ext_resource path="res://Environment/Blocks/Forest/TileSets/Tile Pack/Dirt Tile Pack/Dirt_Tile_Pack_333p.png" type="Texture" id=6]
[ext_resource path="res://Environment/Backgrounds/Forest Backgrounds/Main Background/Trees/TallTrees.tscn" type="PackedScene" id=7]
[ext_resource path="res://Environment/Backgrounds/Forest Backgrounds/Main Background/Background Color.png" type="Texture" id=8]
[ext_resource path="res://Environment/Backgrounds/Forest Backgrounds/Main Background/Trees/ShortTrees.tscn" type="PackedScene" id=9]
[ext_resource path="res://Actors/NPC/Mr. Gerald/MrGerald.tscn" type="PackedScene" id=10]
[ext_resource path="res://Abstract/GenericDoor/GenericDoor.tscn" type="PackedScene" id=11]
[ext_resource path="res://Environment/Backgrounds/Forest Backgrounds/Main Background/Scatter Terrain/ScatterTerrain.tscn" type="PackedScene" id=12]
[ext_resource path="res://Environment/Backgrounds/Forest Backgrounds/Start Background/Start Background 720p_n.png" type="Texture" id=13]
[ext_resource path="res://Environment/Backgrounds/Forest Backgrounds/Main Background/Scatter Terrain/CandyCane.tscn" type="PackedScene" id=14]
[ext_resource path="res://Environment/Backgrounds/Forest Backgrounds/Main Background/Scatter Terrain/CherryScatter.tscn" type="PackedScene" id=15]
[ext_resource path="res://Environment/Backgrounds/Forest Backgrounds/Main Background/Scatter Terrain/Bush.tscn" type="PackedScene" id=16]
[ext_resource path="res://Environment/Backgrounds/Forest Backgrounds/Main Background/Scatter Terrain/Lollipop.tscn" type="PackedScene" id=17]
[ext_resource path="res://Environment/Backgrounds/Forest Backgrounds/Main Background/Scatter Terrain/MintScatter.tscn" type="PackedScene" id=18]
[ext_resource path="res://Environment/Backgrounds/Forest Backgrounds/Main Background/Scatter Terrain/JelloScatter.tscn" type="PackedScene" id=19]
[ext_resource path="res://UserInterface/Tutorial/Tutorial indicator.tscn" type="PackedScene" id=20]
[ext_resource path="res://UserInterface/Tutorial/LeftRightArrow.png" type="Texture" id=21]
[ext_resource path="res://UserInterface/Tutorial/UpArrow.png" type="Texture" id=22]

[sub_resource type="CanvasItemMaterial" id=158]
light_mode = 2

[sub_resource type="Shader" id=1]
code = "// original wind shader from https://github.com/Maujoe/godot-simple-wind-shader-2d/tree/master/assets/maujoe.simple_wind_shader_2d
// original script modified by HungryProton so that the assets are moving differently : https://pastebin.com/VL3AfV8D
//
// speed - The speed of the wind movement.
// minStrength - The minimal strength of the wind movement.
// maxStrength - The maximal strength of the wind movement.
// strengthScale - Scalefactor for the wind strength.
// interval - The time between minimal and maximal strength changes.
// detail - The detail (number of waves) of the wind movement.
// distortion - The strength of geometry distortion.
// heightOffset - The height where the wind begins to move. By default 0.0.

shader_type canvas_item;
render_mode blend_mix;

// Wind settings.
uniform float speed = 1.0;
uniform float minStrength : hint_range(0.0, 1.0) = 0.05;
uniform float maxStrength : hint_range(0.0, 1.0) = 0.01;
uniform float strengthScale = 100.0;
uniform float interval = 3.5;
uniform float detail = 1.0;
uniform float distortion : hint_range(0.0, 1.0);
uniform float heightOffset : hint_range(0.0, 1.0);

// With the offset value, you can if you want different moves for each asset. Just put a random value (1, 2, 3) in the editor. Don't forget to mark the material as unique if you use this
uniform float offset = 0; 


float getWind(vec2 vertex, vec2 uv, float time){
    float diff = pow(maxStrength - minStrength, 2.0);
    float strength = clamp(minStrength + diff + sin(time / interval) * diff, minStrength, maxStrength) * strengthScale;
    float wind = (sin(time) + cos(time * detail)) * strength * max(0.0, (1.0-uv.y) - heightOffset);
    
    return wind; 
}

void vertex() {
    vec4 pos = WORLD_MATRIX * vec4(0.0, 0.0, 0.0, 1.0);
    float time = TIME * speed + offset;
    //float time = TIME * speed + pos.x * pos.y  ; not working when moving...
    VERTEX.x += getWind(VERTEX.xy, UV, time);
}

uniform float first_stage : hint_range(0.0, 1.0) = 0.5; 
uniform float first_smooth : hint_range(0.0, 1.0) = 0.0; // Lengthens the color transition
uniform float second_stage : hint_range(0.0, 1.0) = 0.0;   // If left at 0, only level 1 is used.
uniform float second_smooth : hint_range(0.0, 1.0) = 0.0;
uniform bool rim_light = false;
uniform float rim_thickness : hint_range(0, 40) = 5.0;
uniform float rim_intense : hint_range(0, 1) = 1.0;
uniform bool rim_extra_thick = false;
uniform float min_light : hint_range(0.0, 1.0) = 0.0;
uniform float mid_light : hint_range(0.0, 1.0) = 0.0;
uniform float max_light : hint_range(0.0, 1.0) = 1.0;
uniform float obj_light_add : hint_range(0.0, 1.0) = 0.0;
// Light height variables
uniform bool fake_light_depth = false;
uniform float obj_height : hint_range(-2048.0, 2048.0) = 0.0; 
uniform float min_scale : hint_range(0.0, 10.0) = 0.2;
uniform float max_scale : hint_range(0.0, 10.0) = 2.0; 
uniform float light_change_thresh : hint_range(0.0, 4080.0) = 0.0;
uniform bool light_fade = false;
uniform float light_fade_end : hint_range(0.0, 4080.0) = 0.0;
uniform bool fake_spot_light = false;
uniform float first_shrink_speed : hint_range(0.0, 120.0) = 0.0; 
uniform float second_shrink_speed : hint_range(0.0, 120.0) = 0.0; 
//---------------Color Override
uniform vec4 before_light_modulate : hint_color = vec4(1.0,1.0,1.0,1.0);

void fragment() {
	vec4 texture_color = texture(TEXTURE, UV);
	if (AT_LIGHT_PASS) {
		COLOR = texture_color;
	} else {
		COLOR = texture_color * before_light_modulate;
	}
}
float light_calc(float light_strength, float would_be_strength) {
	float target_strength = light_strength + would_be_strength * obj_light_add;
	if (target_strength == 0.0) {target_strength = 0.000001;}
	if (would_be_strength == 0.0) {would_be_strength = 1.0;}
	return(target_strength / would_be_strength);
}

void light() {
	float level_1 = first_stage;
	float level_1_smooth = first_smooth;
	float level_2 = second_stage;
	float level_2_smooth = second_smooth;
	//---- Light height calc start ------------------------------------
	//-----------------------------------------------------------------
	if (fake_light_depth) {
		float base_height = LIGHT_HEIGHT;
		float new_height = base_height - obj_height;
		LIGHT_HEIGHT = new_height;
		if (fake_spot_light && obj_height < base_height && light_change_thresh < new_height ){
			if (level_1 != 1.0) {
				level_1 -= (light_change_thresh - new_height) * (first_shrink_speed * .0001);
				if (level_2 != 0.0 && level_2 != 1.0) {
					level_2 -= (light_change_thresh - new_height) * (second_shrink_speed * .0001);
				}
			}
		}
		if (light_fade && new_height > light_change_thresh) {
			float n_height_safety = new_height;
			if (n_height_safety == 0.0) { n_height_safety += 0.01; }
			float light_dist_safety = light_change_thresh;
			if (light_dist_safety == 0.0) { light_dist_safety += 0.001; }
			float new_intens = 1.0;
			float dark_distance = light_fade_end;
			if (dark_distance == 0.0) {dark_distance = 1.0;}
			new_intens = 1.0 - abs(abs(light_dist_safety) - abs(n_height_safety)) / dark_distance;
			float light_drop_a = clamp(LIGHT_COLOR.a * new_intens, 0.0, 1.0);
			LIGHT_COLOR *= light_drop_a;
		}
	}
	//---- Light height calc end --------------------------------------
	
	float mid_range_light = mid_light;
	if (mid_light == 0.0) { mid_range_light = max_light * 0.5; }
	vec3 light_normal = normalize(vec3(LIGHT_VEC, -LIGHT_HEIGHT));
	float would_be_strength = max(dot(-light_normal, NORMAL), 0.0);
//-----Light Rim start------------------------------------------------------
	if (rim_light) {
		vec2 size = TEXTURE_PIXEL_SIZE * rim_thickness;
		float outline = texture(TEXTURE, UV + vec2(-size.x, 0)).a;
		outline *= texture(TEXTURE, UV + vec2(0, size.y)).a;
		outline *= texture(TEXTURE, UV + vec2(size.x, 0)).a;
		outline *= texture(TEXTURE, UV + vec2(0, -size.y)).a;
		if (rim_extra_thick) {
			outline *= texture(TEXTURE, UV + vec2(-size.x, size.y)).a;
			outline *= texture(TEXTURE, UV + vec2(size.x, size.y)).a;
			outline *= texture(TEXTURE, UV + vec2(-size.x, -size.y)).a;
			outline *= texture(TEXTURE, UV + vec2(size.x, -size.y)).a;
		}
		outline = 1.0 - outline;

		vec4 color = texture(TEXTURE, UV);
		float rim_cap = outline * color.a * rim_intense * (max_light - min_light);
		LIGHT += rim_cap;
	}
	//-----Light Rim end------------------------------------------------------
	if (would_be_strength > level_1 && level_2 == 0.0 ) {
		float diff = smoothstep(level_1, (level_1 + level_1_smooth), would_be_strength) + min_light;
		if (diff >= max_light) {diff = max_light;}
		LIGHT *= light_calc(diff, would_be_strength);
	} else if (would_be_strength > level_1 && would_be_strength < level_2 && level_2 != 0.0 ) {
		float diff = smoothstep(level_1, (level_1 + level_1_smooth), would_be_strength) + min_light;
		if (diff >= mid_range_light ) {diff = mid_range_light;}
		LIGHT *= light_calc(diff, would_be_strength);
	} else if (would_be_strength >= level_2 && level_2 != 0.0 ) {
		float diff = smoothstep(level_2, (level_2 + level_2_smooth), would_be_strength) + mid_range_light;
		if (diff < mid_range_light ) {diff = mid_range_light;}
		if (diff >= max_light) {diff = max_light;}
		LIGHT *= light_calc(diff, would_be_strength);
	} else { 
		if (min_light != 0.0) { 
			LIGHT_VEC = -NORMAL.xy*length(LIGHT_VEC); 
		}
		LIGHT *= min_light;                                                                                                                                  
	}
}"

[sub_resource type="ShaderMaterial" id=172]
resource_local_to_scene = true
shader = SubResource( 1 )
shader_param/speed = 1.0
shader_param/minStrength = 0.05
shader_param/maxStrength = 0.01
shader_param/strengthScale = 200.0
shader_param/interval = 3.5
shader_param/detail = 1.0
shader_param/distortion = null
shader_param/heightOffset = null
shader_param/offset = 0.0
shader_param/first_stage = 0.126
shader_param/first_smooth = 0.0
shader_param/second_stage = 0.0
shader_param/second_smooth = 0.0
shader_param/rim_light = true
shader_param/rim_thickness = 2.576
shader_param/rim_intense = 1.0
shader_param/rim_extra_thick = false
shader_param/min_light = 0.0
shader_param/mid_light = 0.0
shader_param/max_light = 0.449
shader_param/obj_light_add = 0.0
shader_param/fake_light_depth = false
shader_param/obj_height = 0.0
shader_param/min_scale = 0.2
shader_param/max_scale = 2.0
shader_param/light_change_thresh = 0.0
shader_param/light_fade = false
shader_param/light_fade_end = 0.0
shader_param/fake_spot_light = false
shader_param/first_shrink_speed = 0.0
shader_param/second_shrink_speed = 0.0
shader_param/before_light_modulate = Color( 1, 1, 1, 1 )

[sub_resource type="ShaderMaterial" id=173]
resource_local_to_scene = true
shader = SubResource( 1 )
shader_param/speed = 1.0
shader_param/minStrength = 0.05
shader_param/maxStrength = 0.01
shader_param/strengthScale = 200.0
shader_param/interval = 3.5
shader_param/detail = 1.0
shader_param/distortion = null
shader_param/heightOffset = null
shader_param/offset = 0.0
shader_param/first_stage = 0.126
shader_param/first_smooth = 0.0
shader_param/second_stage = 0.0
shader_param/second_smooth = 0.0
shader_param/rim_light = true
shader_param/rim_thickness = 2.576
shader_param/rim_intense = 1.0
shader_param/rim_extra_thick = false
shader_param/min_light = 0.0
shader_param/mid_light = 0.0
shader_param/max_light = 0.449
shader_param/obj_light_add = 0.0
shader_param/fake_light_depth = false
shader_param/obj_height = 0.0
shader_param/min_scale = 0.2
shader_param/max_scale = 2.0
shader_param/light_change_thresh = 0.0
shader_param/light_fade = false
shader_param/light_fade_end = 0.0
shader_param/fake_spot_light = false
shader_param/first_shrink_speed = 0.0
shader_param/second_shrink_speed = 0.0
shader_param/before_light_modulate = Color( 1, 1, 1, 1 )

[sub_resource type="ShaderMaterial" id=174]
resource_local_to_scene = true
shader = SubResource( 1 )
shader_param/speed = 1.0
shader_param/minStrength = 0.05
shader_param/maxStrength = 0.01
shader_param/strengthScale = 200.0
shader_param/interval = 3.5
shader_param/detail = 1.0
shader_param/distortion = null
shader_param/heightOffset = null
shader_param/offset = 0.0
shader_param/first_stage = 0.126
shader_param/first_smooth = 0.0
shader_param/second_stage = 0.0
shader_param/second_smooth = 0.0
shader_param/rim_light = true
shader_param/rim_thickness = 2.576
shader_param/rim_intense = 1.0
shader_param/rim_extra_thick = false
shader_param/min_light = 0.0
shader_param/mid_light = 0.0
shader_param/max_light = 0.449
shader_param/obj_light_add = 0.0
shader_param/fake_light_depth = false
shader_param/obj_height = 0.0
shader_param/min_scale = 0.2
shader_param/max_scale = 2.0
shader_param/light_change_thresh = 0.0
shader_param/light_fade = false
shader_param/light_fade_end = 0.0
shader_param/fake_spot_light = false
shader_param/first_shrink_speed = 0.0
shader_param/second_shrink_speed = 0.0
shader_param/before_light_modulate = Color( 1, 1, 1, 1 )

[sub_resource type="ShaderMaterial" id=175]
resource_local_to_scene = true
shader = SubResource( 1 )
shader_param/speed = 1.0
shader_param/minStrength = 0.05
shader_param/maxStrength = 0.01
shader_param/strengthScale = 200.0
shader_param/interval = 3.5
shader_param/detail = 1.0
shader_param/distortion = null
shader_param/heightOffset = null
shader_param/offset = 0.0
shader_param/first_stage = 0.126
shader_param/first_smooth = 0.0
shader_param/second_stage = 0.0
shader_param/second_smooth = 0.0
shader_param/rim_light = true
shader_param/rim_thickness = 2.576
shader_param/rim_intense = 1.0
shader_param/rim_extra_thick = false
shader_param/min_light = 0.0
shader_param/mid_light = 0.0
shader_param/max_light = 0.449
shader_param/obj_light_add = 0.0
shader_param/fake_light_depth = false
shader_param/obj_height = 0.0
shader_param/min_scale = 0.2
shader_param/max_scale = 2.0
shader_param/light_change_thresh = 0.0
shader_param/light_fade = false
shader_param/light_fade_end = 0.0
shader_param/fake_spot_light = false
shader_param/first_shrink_speed = 0.0
shader_param/second_shrink_speed = 0.0
shader_param/before_light_modulate = Color( 1, 1, 1, 1 )

[sub_resource type="ShaderMaterial" id=176]
resource_local_to_scene = true
shader = SubResource( 1 )
shader_param/speed = 1.0
shader_param/minStrength = 0.05
shader_param/maxStrength = 0.01
shader_param/strengthScale = 200.0
shader_param/interval = 3.5
shader_param/detail = 1.0
shader_param/distortion = null
shader_param/heightOffset = null
shader_param/offset = 0.0
shader_param/first_stage = 0.126
shader_param/first_smooth = 0.0
shader_param/second_stage = 0.0
shader_param/second_smooth = 0.0
shader_param/rim_light = true
shader_param/rim_thickness = 2.576
shader_param/rim_intense = 1.0
shader_param/rim_extra_thick = false
shader_param/min_light = 0.0
shader_param/mid_light = 0.0
shader_param/max_light = 0.449
shader_param/obj_light_add = 0.0
shader_param/fake_light_depth = false
shader_param/obj_height = 0.0
shader_param/min_scale = 0.2
shader_param/max_scale = 2.0
shader_param/light_change_thresh = 0.0
shader_param/light_fade = false
shader_param/light_fade_end = 0.0
shader_param/fake_spot_light = false
shader_param/first_shrink_speed = 0.0
shader_param/second_shrink_speed = 0.0
shader_param/before_light_modulate = Color( 1, 1, 1, 1 )

[sub_resource type="ShaderMaterial" id=171]
resource_local_to_scene = true
shader = SubResource( 1 )
shader_param/speed = 1.0
shader_param/minStrength = 0.05
shader_param/maxStrength = 0.01
shader_param/strengthScale = 200.0
shader_param/interval = 3.5
shader_param/detail = 1.0
shader_param/distortion = null
shader_param/heightOffset = null
shader_param/offset = 0.0
shader_param/first_stage = 0.126
shader_param/first_smooth = 0.0
shader_param/second_stage = 0.0
shader_param/second_smooth = 0.0
shader_param/rim_light = true
shader_param/rim_thickness = 2.576
shader_param/rim_intense = 1.0
shader_param/rim_extra_thick = false
shader_param/min_light = 0.0
shader_param/mid_light = 0.0
shader_param/max_light = 1.0
shader_param/obj_light_add = 0.187
shader_param/fake_light_depth = false
shader_param/obj_height = 0.0
shader_param/min_scale = 0.2
shader_param/max_scale = 2.0
shader_param/light_change_thresh = 0.0
shader_param/light_fade = false
shader_param/light_fade_end = 0.0
shader_param/fake_spot_light = false
shader_param/first_shrink_speed = 0.0
shader_param/second_shrink_speed = 0.0
shader_param/before_light_modulate = Color( 1, 1, 1, 1 )

[sub_resource type="Shader" id=163]
code = "// original wind shader from https://github.com/Maujoe/godot-simple-wind-shader-2d/tree/master/assets/maujoe.simple_wind_shader_2d
// original script modified by HungryProton so that the assets are moving differently : https://pastebin.com/VL3AfV8D
//
// speed - The speed of the wind movement.
// minStrength - The minimal strength of the wind movement.
// maxStrength - The maximal strength of the wind movement.
// strengthScale - Scalefactor for the wind strength.
// interval - The time between minimal and maximal strength changes.
// detail - The detail (number of waves) of the wind movement.
// distortion - The strength of geometry distortion.
// heightOffset - The height where the wind begins to move. By default 0.0.

shader_type canvas_item;
render_mode blend_mix;

// Wind settings.
uniform float speed = 1.0;
uniform float minStrength : hint_range(0.0, 1.0) = 0.05;
uniform float maxStrength : hint_range(0.0, 1.0) = 0.01;
uniform float strengthScale = 100.0;
uniform float interval = 3.5;
uniform float detail = 1.0;
uniform float distortion : hint_range(0.0, 1.0);
uniform float heightOffset : hint_range(0.0, 1.0);

// With the offset value, you can if you want different moves for each asset. Just put a random value (1, 2, 3) in the editor. Don't forget to mark the material as unique if you use this
uniform float offset = 0; 


float getWind(vec2 vertex, vec2 uv, float time){
    float diff = pow(maxStrength - minStrength, 2.0);
    float strength = clamp(minStrength + diff + sin(time / interval) * diff, minStrength, maxStrength) * strengthScale;
    float wind = (sin(time) + cos(time * detail)) * strength * max(0.0, (1.0-uv.y) - heightOffset);
    
    return wind; 
}

void vertex() {
    vec4 pos = WORLD_MATRIX * vec4(0.0, 0.0, 0.0, 1.0);
    float time = TIME * speed + offset;
    //float time = TIME * speed + pos.x * pos.y  ; not working when moving...
    VERTEX.x += getWind(VERTEX.xy, UV, time);
}

uniform float first_stage : hint_range(0.0, 1.0) = 0.5; 
uniform float first_smooth : hint_range(0.0, 1.0) = 0.0; // Lengthens the color transition
uniform float second_stage : hint_range(0.0, 1.0) = 0.0;   // If left at 0, only level 1 is used.
uniform float second_smooth : hint_range(0.0, 1.0) = 0.0;
uniform bool rim_light = false;
uniform float rim_thickness : hint_range(0, 40) = 5.0;
uniform float rim_intense : hint_range(0, 1) = 1.0;
uniform bool rim_extra_thick = false;
uniform float min_light : hint_range(0.0, 1.0) = 0.0;
uniform float mid_light : hint_range(0.0, 1.0) = 0.0;
uniform float max_light : hint_range(0.0, 1.0) = 1.0;
uniform float obj_light_add : hint_range(0.0, 1.0) = 0.0;
// Light height variables
uniform bool fake_light_depth = false;
uniform float obj_height : hint_range(-2048.0, 2048.0) = 0.0; 
uniform float min_scale : hint_range(0.0, 10.0) = 0.2;
uniform float max_scale : hint_range(0.0, 10.0) = 2.0; 
uniform float light_change_thresh : hint_range(0.0, 4080.0) = 0.0;
uniform bool light_fade = false;
uniform float light_fade_end : hint_range(0.0, 4080.0) = 0.0;
uniform bool fake_spot_light = false;
uniform float first_shrink_speed : hint_range(0.0, 120.0) = 0.0; 
uniform float second_shrink_speed : hint_range(0.0, 120.0) = 0.0; 
//---------------Color Override
uniform vec4 before_light_modulate : hint_color = vec4(1.0,1.0,1.0,1.0);

void fragment() {
	vec4 texture_color = texture(TEXTURE, UV);
	if (AT_LIGHT_PASS) {
		COLOR = texture_color;
	} else {
		COLOR = texture_color * before_light_modulate;
	}
}
float light_calc(float light_strength, float would_be_strength) {
	float target_strength = light_strength + would_be_strength * obj_light_add;
	if (target_strength == 0.0) {target_strength = 0.000001;}
	if (would_be_strength == 0.0) {would_be_strength = 1.0;}
	return(target_strength / would_be_strength);
}

void light() {
	float level_1 = first_stage;
	float level_1_smooth = first_smooth;
	float level_2 = second_stage;
	float level_2_smooth = second_smooth;
	//---- Light height calc start ------------------------------------
	//-----------------------------------------------------------------
	if (fake_light_depth) {
		float base_height = LIGHT_HEIGHT;
		float new_height = base_height - obj_height;
		LIGHT_HEIGHT = new_height;
		if (fake_spot_light && obj_height < base_height && light_change_thresh < new_height ){
			if (level_1 != 1.0) {
				level_1 -= (light_change_thresh - new_height) * (first_shrink_speed * .0001);
				if (level_2 != 0.0 && level_2 != 1.0) {
					level_2 -= (light_change_thresh - new_height) * (second_shrink_speed * .0001);
				}
			}
		}
		if (light_fade && new_height > light_change_thresh) {
			float n_height_safety = new_height;
			if (n_height_safety == 0.0) { n_height_safety += 0.01; }
			float light_dist_safety = light_change_thresh;
			if (light_dist_safety == 0.0) { light_dist_safety += 0.001; }
			float new_intens = 1.0;
			float dark_distance = light_fade_end;
			if (dark_distance == 0.0) {dark_distance = 1.0;}
			new_intens = 1.0 - abs(abs(light_dist_safety) - abs(n_height_safety)) / dark_distance;
			float light_drop_a = clamp(LIGHT_COLOR.a * new_intens, 0.0, 1.0);
			LIGHT_COLOR *= light_drop_a;
		}
	}
	//---- Light height calc end --------------------------------------
	
	float mid_range_light = mid_light;
	if (mid_light == 0.0) { mid_range_light = max_light * 0.5; }
	vec3 light_normal = normalize(vec3(LIGHT_VEC, -LIGHT_HEIGHT));
	float would_be_strength = max(dot(-light_normal, NORMAL), 0.0);
//-----Light Rim start------------------------------------------------------
	if (rim_light) {
		vec2 size = TEXTURE_PIXEL_SIZE * rim_thickness;
		float outline = texture(TEXTURE, UV + vec2(-size.x, 0)).a;
		outline *= texture(TEXTURE, UV + vec2(0, size.y)).a;
		outline *= texture(TEXTURE, UV + vec2(size.x, 0)).a;
		outline *= texture(TEXTURE, UV + vec2(0, -size.y)).a;
		if (rim_extra_thick) {
			outline *= texture(TEXTURE, UV + vec2(-size.x, size.y)).a;
			outline *= texture(TEXTURE, UV + vec2(size.x, size.y)).a;
			outline *= texture(TEXTURE, UV + vec2(-size.x, -size.y)).a;
			outline *= texture(TEXTURE, UV + vec2(size.x, -size.y)).a;
		}
		outline = 1.0 - outline;

		vec4 color = texture(TEXTURE, UV);
		float rim_cap = outline * color.a * rim_intense * (max_light - min_light);
		LIGHT += rim_cap;
	}
	//-----Light Rim end------------------------------------------------------
	if (would_be_strength > level_1 && level_2 == 0.0 ) {
		float diff = smoothstep(level_1, (level_1 + level_1_smooth), would_be_strength) + min_light;
		if (diff >= max_light) {diff = max_light;}
		LIGHT *= light_calc(diff, would_be_strength);
	} else if (would_be_strength > level_1 && would_be_strength < level_2 && level_2 != 0.0 ) {
		float diff = smoothstep(level_1, (level_1 + level_1_smooth), would_be_strength) + min_light;
		if (diff >= mid_range_light ) {diff = mid_range_light;}
		LIGHT *= light_calc(diff, would_be_strength);
	} else if (would_be_strength >= level_2 && level_2 != 0.0 ) {
		float diff = smoothstep(level_2, (level_2 + level_2_smooth), would_be_strength) + mid_range_light;
		if (diff < mid_range_light ) {diff = mid_range_light;}
		if (diff >= max_light) {diff = max_light;}
		LIGHT *= light_calc(diff, would_be_strength);
	} else { 
		if (min_light != 0.0) { 
			LIGHT_VEC = -NORMAL.xy*length(LIGHT_VEC); 
		}
		LIGHT *= min_light;                                                                                                                                  
	}
}"

[sub_resource type="ShaderMaterial" id=164]
shader = SubResource( 163 )
shader_param/speed = 1.0
shader_param/minStrength = 0.05
shader_param/maxStrength = 0.01
shader_param/strengthScale = 100.0
shader_param/interval = 3.5
shader_param/detail = 1.0
shader_param/distortion = null
shader_param/heightOffset = null
shader_param/offset = 0.0
shader_param/first_stage = 0.5
shader_param/first_smooth = 0.0
shader_param/second_stage = 0.0
shader_param/second_smooth = 0.0
shader_param/rim_light = true
shader_param/rim_thickness = 7.041
shader_param/rim_intense = 1.0
shader_param/rim_extra_thick = true
shader_param/min_light = 0.0
shader_param/mid_light = 0.0
shader_param/max_light = 1.0
shader_param/obj_light_add = 0.0
shader_param/fake_light_depth = false
shader_param/obj_height = 0.0
shader_param/min_scale = 0.2
shader_param/max_scale = 2.0
shader_param/light_change_thresh = 0.0
shader_param/light_fade = false
shader_param/light_fade_end = 0.0
shader_param/fake_spot_light = false
shader_param/first_shrink_speed = 0.0
shader_param/second_shrink_speed = 0.0
shader_param/before_light_modulate = Color( 1, 1, 1, 1 )

[sub_resource type="ConvexPolygonShape2D" id=104]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=105]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=106]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=107]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=108]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=109]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=110]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=111]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=112]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=113]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=114]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=115]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=116]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=117]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=118]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=119]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=120]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=121]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=122]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=123]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=124]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=125]
points = PoolVector2Array( 0, 320, 320, 320, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=126]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=127]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=128]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=129]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=130]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=131]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=132]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=133]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=134]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=135]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=136]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=137]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=138]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=139]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=140]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=141]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=142]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=143]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=144]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=145]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=146]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=147]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=148]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=149]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=150]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=151]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="ConvexPolygonShape2D" id=152]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="ConvexPolygonShape2D" id=153]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="ConvexPolygonShape2D" id=154]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="ConvexPolygonShape2D" id=155]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="TileSet" id=156]
resource_local_to_scene = true
2/name = "Grass Tile Pack 2160p.png 2"
2/texture = ExtResource( 1 )
2/tex_offset = Vector2( 0, 0 )
2/modulate = Color( 1, 1, 1, 1 )
2/region = Rect2( 0, 7, 3840, 1600 )
2/tile_mode = 1
2/autotile/bitmask_mode = 1
2/autotile/bitmask_flags = [ Vector2( 0, 0 ), 144, Vector2( 0, 1 ), 146, Vector2( 0, 2 ), 18, Vector2( 1, 0 ), 176, Vector2( 1, 1 ), 178, Vector2( 1, 2 ), 50, Vector2( 2, 0 ), 184, Vector2( 2, 1 ), 186, Vector2( 2, 2 ), 58, Vector2( 3, 0 ), 152, Vector2( 3, 1 ), 154, Vector2( 3, 2 ), 26, Vector2( 4, 0 ), 187, Vector2( 4, 1 ), 434, Vector2( 4, 2 ), 182, Vector2( 4, 3 ), 250, Vector2( 5, 0 ), 440, Vector2( 5, 1 ), 510, Vector2( 5, 2 ), 447, Vector2( 5, 3 ), 62, Vector2( 6, 0 ), 248, Vector2( 6, 1 ), 507, Vector2( 6, 2 ), 255, Vector2( 6, 3 ), 59, Vector2( 7, 0 ), 190, Vector2( 7, 1 ), 218, Vector2( 7, 2 ), 155, Vector2( 7, 3 ), 442, Vector2( 8, 0 ), 432, Vector2( 8, 1 ), 438, Vector2( 8, 2 ), 446, Vector2( 8, 3 ), 54, Vector2( 9, 0 ), 506, Vector2( 9, 1 ), 254, Vector2( 9, 2 ), 511, Vector2( 9, 3 ), 63, Vector2( 9, 4 ), 504, Vector2( 10, 0 ), 504, Vector2( 10, 2 ), 443, Vector2( 10, 3 ), 191, Vector2( 10, 4 ), 504, Vector2( 11, 0 ), 216, Vector2( 11, 1 ), 251, Vector2( 11, 2 ), 219, Vector2( 11, 3 ), 27, Vector2( 11, 4 ), 504 ]
2/autotile/icon_coordinate = Vector2( 0, 0 )
2/autotile/tile_size = Vector2( 336, 336 )
2/autotile/spacing = 0
2/autotile/occluder_map = [  ]
2/autotile/navpoly_map = [  ]
2/autotile/priority_map = [  ]
2/autotile/z_index_map = [  ]
2/occluder_offset = Vector2( 0, 0 )
2/navigation_offset = Vector2( 0, 0 )
2/shape_offset = Vector2( 0, 0 )
2/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
2/shape = SubResource( 104 )
2/shape_one_way = false
2/shape_one_way_margin = 1.0
2/shapes = [ {
"autotile_coord": Vector2( 0, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 104 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 0, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 105 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 0, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 106 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 1, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 107 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 1, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 108 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 1, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 109 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 2, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 110 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 2, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 111 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 2, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 112 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 3, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 113 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 3, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 114 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 3, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 115 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 4, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 116 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 4, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 117 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 4, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 118 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 4, 3 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 119 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 5, 3 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 120 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 5, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 121 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 5, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 122 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 5, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 123 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 6, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 124 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 6, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 125 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 6, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 126 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 6, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 127 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 6, 3 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 128 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 7, 3 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 129 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 7, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 130 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 7, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 131 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 7, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 132 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 8, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 133 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 8, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 134 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 8, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 135 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 8, 3 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 136 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 9, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 137 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 9, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 138 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 9, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 139 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 9, 3 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 140 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 10, 3 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 141 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 11, 3 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 142 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 10, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 143 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 11, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 144 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 11, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 145 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 11, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 146 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 10, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 147 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 9, 4 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 148 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 10, 4 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 149 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 11, 4 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 150 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
} ]
2/z_index = 0
3/name = "Dirt_Tile_Pack_2160p.png 3"
3/texture = ExtResource( 6 )
3/tex_offset = Vector2( 0, 0 )
3/modulate = Color( 1, 1, 1, 1 )
3/region = Rect2( 0, 7, 4032, 1680 )
3/tile_mode = 1
3/autotile/bitmask_mode = 1
3/autotile/bitmask_flags = [ Vector2( 0, 0 ), 144, Vector2( 0, 1 ), 146, Vector2( 0, 2 ), 18, Vector2( 1, 0 ), 176, Vector2( 1, 1 ), 178, Vector2( 1, 2 ), 50, Vector2( 2, 0 ), 184, Vector2( 2, 1 ), 186, Vector2( 2, 2 ), 58, Vector2( 3, 0 ), 152, Vector2( 3, 1 ), 154, Vector2( 3, 2 ), 26, Vector2( 4, 0 ), 187, Vector2( 4, 1 ), 434, Vector2( 4, 2 ), 182, Vector2( 4, 3 ), 250, Vector2( 5, 0 ), 440, Vector2( 5, 1 ), 510, Vector2( 5, 2 ), 447, Vector2( 5, 3 ), 62, Vector2( 6, 0 ), 248, Vector2( 6, 1 ), 507, Vector2( 6, 2 ), 255, Vector2( 6, 3 ), 59, Vector2( 7, 0 ), 190, Vector2( 7, 1 ), 218, Vector2( 7, 2 ), 155, Vector2( 7, 3 ), 442, Vector2( 7, 4 ), 504, Vector2( 8, 0 ), 432, Vector2( 8, 1 ), 438, Vector2( 8, 2 ), 446, Vector2( 8, 3 ), 54, Vector2( 8, 4 ), 504, Vector2( 9, 0 ), 506, Vector2( 9, 1 ), 254, Vector2( 9, 2 ), 511, Vector2( 9, 3 ), 63, Vector2( 9, 4 ), 504, Vector2( 10, 0 ), 504, Vector2( 10, 2 ), 443, Vector2( 10, 3 ), 191, Vector2( 10, 4 ), 504, Vector2( 11, 0 ), 216, Vector2( 11, 1 ), 251, Vector2( 11, 2 ), 219, Vector2( 11, 3 ), 27, Vector2( 11, 4 ), 504 ]
3/autotile/icon_coordinate = Vector2( 0, 0 )
3/autotile/tile_size = Vector2( 336, 336 )
3/autotile/spacing = 0
3/autotile/occluder_map = [  ]
3/autotile/navpoly_map = [  ]
3/autotile/priority_map = [  ]
3/autotile/z_index_map = [  ]
3/occluder_offset = Vector2( 0, 0 )
3/navigation_offset = Vector2( 0, 0 )
3/shape_offset = Vector2( 0, 0 )
3/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
3/shape = SubResource( 151 )
3/shape_one_way = false
3/shape_one_way_margin = 1.0
3/shapes = [ {
"autotile_coord": Vector2( 0, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 151 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 0, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 152 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 0, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 153 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 1, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 154 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 1, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 155 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
} ]
3/z_index = 0

[sub_resource type="Shader" id=165]
code = "shader_type canvas_item;

uniform bool rim_light = false;
uniform float rim_thickness : hint_range(0, 40) = 5.0;
uniform float rim_intense : hint_range(0, 1) = 1.0;
uniform bool rim_extra_thick = false;

void light() {
	if (rim_light) {
		vec2 size = TEXTURE_PIXEL_SIZE * rim_thickness;
		float outline = texture(TEXTURE, UV + vec2(-size.x, 0)).a;
		outline *= texture(TEXTURE, UV + vec2(0, size.y)).a;
		outline *= texture(TEXTURE, UV + vec2(size.x, 0)).a;
		outline *= texture(TEXTURE, UV + vec2(0, -size.y)).a;
		if (rim_extra_thick) {
			outline *= texture(TEXTURE, UV + vec2(-size.x, size.y)).a;
			outline *= texture(TEXTURE, UV + vec2(size.x, size.y)).a;
			outline *= texture(TEXTURE, UV + vec2(-size.x, -size.y)).a;
			outline *= texture(TEXTURE, UV + vec2(size.x, -size.y)).a;
		}
		outline = 1.0 - outline;

		vec4 color = texture(TEXTURE, UV);
		float rim_cap = outline * color.a * rim_intense;
		LIGHT += rim_cap;
	}
}

uniform vec4 line_color : hint_color = vec4(1);
uniform float line_thickness : hint_range(0, 10) = 1.0;

void fragment() {
	vec2 size = TEXTURE_PIXEL_SIZE * line_thickness;
	
	float outline = texture(TEXTURE, UV + vec2(-size.x, 0)).a;
	outline += texture(TEXTURE, UV + vec2(0, size.y)).a;
	outline += texture(TEXTURE, UV + vec2(size.x, 0)).a;
	outline += texture(TEXTURE, UV + vec2(0, -size.y)).a;
	outline += texture(TEXTURE, UV + vec2(-size.x, size.y)).a;
	outline += texture(TEXTURE, UV + vec2(size.x, size.y)).a;
	outline += texture(TEXTURE, UV + vec2(-size.x, -size.y)).a;
	outline += texture(TEXTURE, UV + vec2(size.x, -size.y)).a;
	outline = min(outline, 1.0);
	
	vec4 color = texture(TEXTURE, UV);
	COLOR = mix(color, line_color, outline - color.a);
}"

[sub_resource type="ShaderMaterial" id=166]
shader = SubResource( 165 )
shader_param/rim_light = true
shader_param/rim_thickness = 7.549
shader_param/rim_intense = 1.0
shader_param/rim_extra_thick = false
shader_param/line_color = Color( 0, 0, 0, 1 )
shader_param/line_thickness = 3.0

[node name="FirstLevel" type="Node2D"]
pause_mode = 1
material = SubResource( 158 )
script = ExtResource( 5 )
level_range_x = Vector2( 0, 500 )
level_range_y = Vector2( -500, 500 )

[node name="ParallaxBackground" type="ParallaxBackground" parent="."]
layer = -1

[node name="ParallaxLayer4" type="ParallaxLayer" parent="ParallaxBackground"]

[node name="BackgroundColor" type="Sprite" parent="ParallaxBackground/ParallaxLayer4"]
position = Vector2( 1339, 366 )
texture = ExtResource( 8 )

[node name="TallTrees" parent="ParallaxBackground/ParallaxLayer4" instance=ExtResource( 7 )]
material = SubResource( 172 )
position = Vector2( 0, 3 )
cell_size = Vector2( 32, 32 )
tile_data = PoolIntArray( 589852, 15, 0, 589854, 6, 0 )

[node name="BushScatter" parent="ParallaxBackground/ParallaxLayer4/TallTrees" instance=ExtResource( 16 )]
position = Vector2( 667.5, 597.5 )
rotation = 0.28208
scale = Vector2( 0.145139, 0.145139 )
frame = 3

[node name="ShortTrees" parent="ParallaxBackground/ParallaxLayer4" instance=ExtResource( 9 )]
material = SubResource( 173 )
tile_data = PoolIntArray( 458762, 11, 0 )

[node name="ParallaxLayer3" type="ParallaxLayer" parent="ParallaxBackground"]

[node name="TallTrees" parent="ParallaxBackground/ParallaxLayer3" instance=ExtResource( 7 )]
material = SubResource( 174 )
scale = Vector2( -0.4, 0.4 )
tile_data = PoolIntArray( 327662, 3, 0 )

[node name="TallTrees2" parent="ParallaxBackground/ParallaxLayer3" instance=ExtResource( 7 )]
material = SubResource( 175 )
tile_data = PoolIntArray( 262149, 5, 0, 327685, 14, 0, 327696, 13, 0 )

[node name="ParallaxLayer2" type="ParallaxLayer" parent="ParallaxBackground"]

[node name="TallTrees" parent="ParallaxBackground/ParallaxLayer2" instance=ExtResource( 7 )]
material = SubResource( 176 )
cell_size = Vector2( 32, 32 )
tile_data = PoolIntArray( 655365, 9, 0 )

[node name="ShortTrees" parent="ParallaxBackground/ParallaxLayer2" instance=ExtResource( 9 )]
material = SubResource( 171 )
cell_size = Vector2( 16, 16 )
tile_data = PoolIntArray( 917541, 0, 0, 1835081, 7, 0 )

[node name="ScatterTerrain" parent="ParallaxBackground/ParallaxLayer2" instance=ExtResource( 12 )]

[node name="ScatterTerrain3" parent="ParallaxBackground/ParallaxLayer2" instance=ExtResource( 12 )]
rotation = 2.94933
scale = Vector2( 0.1, -0.1 )
tile_data = PoolIntArray( 3211202, 2, 0, 9372074, 6, 0 )

[node name="ScatterTerrain2" parent="ParallaxBackground/ParallaxLayer2" instance=ExtResource( 12 )]
scale = Vector2( 0.05, 0.05 )
tile_data = PoolIntArray( 5046410, 6, 0 )

[node name="LollipopScatter" parent="ParallaxBackground/ParallaxLayer2" instance=ExtResource( 17 )]
position = Vector2( 29, 105 )
rotation = 0.589425
scale = Vector2( 0.114706, 0.114706 )
frame = 1

[node name="BushScatter" parent="ParallaxBackground/ParallaxLayer2" instance=ExtResource( 16 )]
position = Vector2( 21, 139 )
rotation = 0.277266
scale = Vector2( 0.0572196, 0.0572196 )
frame = 1

[node name="CandyCaneScatter3" parent="ParallaxBackground/ParallaxLayer2" instance=ExtResource( 14 )]
position = Vector2( 502, 55 )
rotation = -0.471225
scale = Vector2( 0.096, 0.101 )
flip_h = true
frame = 2

[node name="MintScatter" parent="." instance=ExtResource( 18 )]
position = Vector2( 517, 76 )
rotation = -0.165396
scale = Vector2( 0.0544355, 0.0544355 )
frame = 1

[node name="StartBackground720p" type="Sprite" parent="."]
material = SubResource( 164 )
position = Vector2( 329, 130.404 )
scale = Vector2( 0.2, 0.207261 )
texture = ExtResource( 4 )
normal_map = ExtResource( 13 )

[node name="LollipopScatter2" parent="StartBackground720p" instance=ExtResource( 17 )]
position = Vector2( 1583.17, 493.915 )
rotation = 2.84427
scale = Vector2( 0.484366, -0.484366 )
frame = 1

[node name="CandyCaneScatter2" parent="StartBackground720p" instance=ExtResource( 14 )]
position = Vector2( 1595, -469.958 )
rotation = 2.8188
scale = Vector2( 0.392588, -0.392247 )
frame = 1

[node name="LollipopScatter" parent="StartBackground720p" instance=ExtResource( 17 )]
position = Vector2( 1601.27, -315.238 )
rotation = -0.602649
scale = Vector2( -0.485519, 0.485519 )

[node name="CandyCaneScatter2" parent="." instance=ExtResource( 14 )]
position = Vector2( 653.681, 200.805 )
rotation = -0.562174
scale = Vector2( 0.099997, 0.103466 )

[node name="TileMap" parent="." instance=ExtResource( 3 )]
position = Vector2( 0, 25 )
scale = Vector2( 0.14, 0.14 )
tile_set = SubResource( 156 )
tile_data = PoolIntArray( -131074, 2, 8, -131073, 2, 262154, -196608, 2, 262154, -196607, 2, 262153, -196606, 2, 262155, -196605, 2, 262154, -196604, 2, 262155, -196603, 2, 262154, -196602, 2, 10, -196601, 2, 262154, -196600, 2, 10, -196599, 2, 262154, -196598, 2, 262155, -196597, 2, 262154, -196596, 2, 10, -196595, 2, 262153, -196594, 2, 262153, -196593, 2, 11, -65538, 2, 65544, -65537, 2, 131078, -131072, 2, 196617, -131071, 2, 196617, -131070, 2, 196617, -131069, 2, 196617, -131068, 2, 196617, -131067, 2, 196617, -131066, 2, 196617, -131065, 2, 196617, -131064, 2, 196617, -131063, 2, 196617, -131062, 2, 196617, -131061, 2, 196617, -131060, 2, 196617, -131059, 2, 196617, -131058, 2, 131077, -131057, 2, 131083, -2, 2, 65544, -1, 2, 131083, -65522, 2, 65544, -65521, 2, 131083, 65534, 2, 65544, 65535, 2, 131083, 14, 2, 65544, 15, 2, 131083, 131070, 2, 65544, 131071, 2, 131083, 65550, 2, 65544, 65551, 2, 131083, 196606, 2, 65544, 196607, 2, 131083, 131086, 2, 65544, 131087, 2, 131083, 262142, 2, 65544, 262143, 2, 131083, 196622, 2, 65544, 196623, 2, 131083, 327678, 2, 65544, 327679, 2, 131083, 262158, 2, 65544, 262159, 2, 131083, 393214, 2, 65544, 393215, 2, 65542, 327680, 2, 262153, 327681, 2, 262153, 327682, 2, 262154, 327683, 2, 262154, 327684, 2, 262155, 327685, 2, 10, 327686, 2, 10, 327687, 2, 262153, 327688, 2, 262155, 327689, 2, 262153, 327690, 2, 262154, 327691, 2, 262153, 327692, 2, 262153, 327693, 2, 262154, 327694, 2, 65541, 327695, 2, 131083, 458750, 2, 65544, 458751, 2, 131081, 393216, 2, 131081, 393217, 2, 131081, 393218, 2, 131081, 393219, 2, 131081, 393220, 2, 131081, 393221, 2, 131081, 393222, 2, 131081, 393223, 2, 131081, 393224, 2, 131081, 393225, 2, 131081, 393226, 2, 131081, 393227, 2, 131081, 393228, 2, 131081, 393229, 2, 131081, 393230, 2, 131081, 393231, 2, 131083, 524286, 2, 65544, 524287, 2, 131081, 458752, 2, 131081, 458753, 2, 131081, 458754, 2, 131081, 458755, 2, 131081, 458756, 2, 131081, 458757, 2, 131081, 458758, 2, 131081, 458759, 2, 131081, 458760, 2, 131081, 458761, 2, 131081, 458762, 2, 131081, 458763, 2, 131081, 458764, 2, 131081, 458765, 2, 131081, 458766, 2, 131081, 458767, 2, 131083, 589822, 2, 196616, 589823, 2, 196617, 524288, 2, 196617, 524289, 2, 196617, 524290, 2, 196617, 524291, 2, 196617, 524292, 2, 196617, 524293, 2, 196617, 524294, 2, 196617, 524295, 2, 196617, 524296, 2, 196617, 524297, 2, 196617, 524298, 2, 196617, 524299, 2, 196617, 524300, 2, 196617, 524301, 2, 196617, 524302, 2, 196617, 524303, 2, 196619 )

[node name="Checkpoint" parent="." instance=ExtResource( 2 )]
position = Vector2( 309, 263 )

[node name="Camera2D" type="Camera2D" parent="."]
position = Vector2( 330, 195 )
zoom = Vector2( 0.343, 0.343 )

[node name="MrGerald" parent="." instance=ExtResource( 10 )]
light_mask = 17
material = SubResource( 166 )
position = Vector2( 504, 245 )

[node name="GenericDoor" parent="." instance=ExtResource( 11 )]
position = Vector2( 597, 209 )
target_scene = "res://Levels/SecondLevel.tscn"

[node name="CherryScatter" parent="." instance=ExtResource( 15 )]
position = Vector2( 23, 252 )
rotation = 0.24999
scale = Vector2( 0.0358655, 0.0343099 )
z_index = 1
frame = 1

[node name="LollipopScatter3" parent="." instance=ExtResource( 17 )]
position = Vector2( 585, 244 )
rotation = -2.67028
scale = Vector2( 0.0602469, -0.0606096 )
frame = 1

[node name="CandyCaneScatter" parent="." instance=ExtResource( 14 )]
position = Vector2( 14, 224 )
rotation = 0.682161
scale = Vector2( 0.0838919, 0.0838919 )
z_index = 1

[node name="CherryScatter2" parent="." instance=ExtResource( 15 )]
position = Vector2( 576, 255 )
rotation = -0.120583
scale = Vector2( -0.0234392, 0.0234392 )

[node name="JelloScatter" parent="." instance=ExtResource( 19 )]
position = Vector2( 3, 248 )
rotation = 0.381631
scale = Vector2( 0.0501771, 0.0501771 )
z_index = 1

[node name="Tutorial indicator" parent="." instance=ExtResource( 20 )]
position = Vector2( 318, 231 )

[node name="Sprite" type="Sprite" parent="Tutorial indicator"]
visible = false
scale = Vector2( 0.08, 0.08 )
texture = ExtResource( 21 )

[node name="Tutorial indicator2" parent="." instance=ExtResource( 20 )]
position = Vector2( 503, 198 )
scale = Vector2( 0.689487, 1.54936 )

[node name="Sprite" type="Sprite" parent="Tutorial indicator2"]
visible = false
position = Vector2( 1.16016, 0 )
scale = Vector2( 0.0959118, 0.0457482 )
texture = ExtResource( 22 )

[node name="Tutorial indicator3" parent="." instance=ExtResource( 20 )]
position = Vector2( 612, 195 )
scale = Vector2( 0.689487, 1.54936 )

[node name="Sprite" type="Sprite" parent="Tutorial indicator3"]
visible = false
position = Vector2( 1.16016, 0 )
scale = Vector2( 0.0959118, 0.0457482 )
texture = ExtResource( 22 )
