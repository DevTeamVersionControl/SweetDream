[gd_scene load_steps=131 format=2]

[ext_resource path="res://Environment/Blocks/Forest/TileSets/Tile Pack/Grass Tile Pack/Grass Tile Pack 333p.png" type="Texture" id=1]
[ext_resource path="res://Abstract/GenericDoor/GenericDoor.tscn" type="PackedScene" id=2]
[ext_resource path="res://Environment/Blocks/Forest/TileSets/ForestTileMap.tscn" type="PackedScene" id=3]
[ext_resource path="res://Environment/Backgrounds/Forest Backgrounds/Start Background/Start Background 2 720p.png" type="Texture" id=4]
[ext_resource path="res://Environment/Blocks/Forest/TileSets/Tile Pack/Dirt Tile Pack/Dirt_Tile_Pack_333p.png" type="Texture" id=5]
[ext_resource path="res://Abstract/Checkpoint/Checkpoint.tscn" type="PackedScene" id=6]
[ext_resource path="res://Environment/Backgrounds/Forest Backgrounds/Main Background/Trees/TallTrees.tscn" type="PackedScene" id=7]
[ext_resource path="res://Environment/Backgrounds/Forest Backgrounds/Main Background/Background Color.png" type="Texture" id=8]
[ext_resource path="res://Environment/Backgrounds/Forest Backgrounds/Main Background/Trees/ShortTrees.tscn" type="PackedScene" id=9]
[ext_resource path="res://Environment/Backgrounds/Forest Backgrounds/Main Background/Background Floors/BackgroundFloors.tscn" type="PackedScene" id=11]
[ext_resource path="res://Environment/Backgrounds/Forest Backgrounds/Main Background/Scatter Terrain/ScatterTerrain.tscn" type="PackedScene" id=12]
[ext_resource path="res://Environment/Backgrounds/Forest Backgrounds/Underground Background/Back Textures/UndergroundBackground.tscn" type="PackedScene" id=13]
[ext_resource path="res://Levels/Level.gd" type="Script" id=14]
[ext_resource path="res://Environment/Light/DarkZone.tscn" type="PackedScene" id=15]
[ext_resource path="res://Environment/Backgrounds/Forest Backgrounds/Main Background/Clouds/Clouds.tscn" type="PackedScene" id=16]
[ext_resource path="res://Actors/Enemies/Jawbreaker/Jawbreaker.tscn" type="PackedScene" id=17]
[ext_resource path="res://Actors/Player/LightMask.png" type="Texture" id=18]
[ext_resource path="res://Environment/Light/godrays.tres" type="Material" id=19]
[ext_resource path="res://Environment/Light/light.png" type="Texture" id=20]
[ext_resource path="res://Environment/Backgrounds/Forest Backgrounds/Main Background/Trees/Tiny Trees/Tiny Tree 720p.png" type="Texture" id=21]
[ext_resource path="res://Environment/Backgrounds/Forest Backgrounds/Main Background/Trees/Tiny Trees/Tiny Tree 720p_n.png" type="Texture" id=22]
[ext_resource path="res://Actors/Enemies/Heart Enemy/Heart.tscn" type="PackedScene" id=23]
[ext_resource path="res://Environment/Backgrounds/Forest Backgrounds/Main Background/Scatter Terrain/MintScatter.tscn" type="PackedScene" id=24]

[sub_resource type="CanvasItemMaterial" id=198]
light_mode = 2

[sub_resource type="CanvasItemMaterial" id=200]
light_mode = 2

[sub_resource type="Shader" id=1]
code = "// original wind shader from https://github.com/Maujoe/godot-simple-wind-shader-2d/tree/master/assets/maujoe.simple_wind_shader_2d
// original script modified by HungryProton so that the assets are moving differently : https://pastebin.com/VL3AfV8D
//
// speed - The speed of the wind movement.
// minStrength - The minimal strength of the wind movement.
// maxStrength - The maximal strength of the wind movement.
// strengthScale - Scalefactor for the wind strength.
// interval - The time between minimal and maximal strength changes.
// detail - The detail (number of waves) of the wind movement.
// distortion - The strength of geometry distortion.
// heightOffset - The height where the wind begins to move. By default 0.0.

shader_type canvas_item;
render_mode blend_mix;

// Wind settings.
uniform float speed = 1.0;
uniform float minStrength : hint_range(0.0, 1.0) = 0.05;
uniform float maxStrength : hint_range(0.0, 1.0) = 0.01;
uniform float strengthScale = 100.0;
uniform float interval = 3.5;
uniform float detail = 1.0;
uniform float distortion : hint_range(0.0, 1.0);
uniform float heightOffset : hint_range(0.0, 1.0);

// With the offset value, you can if you want different moves for each asset. Just put a random value (1, 2, 3) in the editor. Don't forget to mark the material as unique if you use this
uniform float offset = 0; 


float getWind(vec2 vertex, vec2 uv, float time){
    float diff = pow(maxStrength - minStrength, 2.0);
    float strength = clamp(minStrength + diff + sin(time / interval) * diff, minStrength, maxStrength) * strengthScale;
    float wind = (sin(time) + cos(time * detail)) * strength * max(0.0, (1.0-uv.y) - heightOffset);
    
    return wind; 
}

void vertex() {
    vec4 pos = WORLD_MATRIX * vec4(0.0, 0.0, 0.0, 1.0);
    float time = TIME * speed + offset;
    //float time = TIME * speed + pos.x * pos.y  ; not working when moving...
    VERTEX.x += getWind(VERTEX.xy, UV, time);
}

uniform float first_stage : hint_range(0.0, 1.0) = 0.5; 
uniform float first_smooth : hint_range(0.0, 1.0) = 0.0; // Lengthens the color transition
uniform float second_stage : hint_range(0.0, 1.0) = 0.0;   // If left at 0, only level 1 is used.
uniform float second_smooth : hint_range(0.0, 1.0) = 0.0;
uniform bool rim_light = false;
uniform float rim_thickness : hint_range(0, 40) = 5.0;
uniform float rim_intense : hint_range(0, 1) = 1.0;
uniform bool rim_extra_thick = false;
uniform float min_light : hint_range(0.0, 1.0) = 0.0;
uniform float mid_light : hint_range(0.0, 1.0) = 0.0;
uniform float max_light : hint_range(0.0, 1.0) = 1.0;
uniform float obj_light_add : hint_range(0.0, 1.0) = 0.0;
// Light height variables
uniform bool fake_light_depth = false;
uniform float obj_height : hint_range(-2048.0, 2048.0) = 0.0; 
uniform float min_scale : hint_range(0.0, 10.0) = 0.2;
uniform float max_scale : hint_range(0.0, 10.0) = 2.0; 
uniform float light_change_thresh : hint_range(0.0, 4080.0) = 0.0;
uniform bool light_fade = false;
uniform float light_fade_end : hint_range(0.0, 4080.0) = 0.0;
uniform bool fake_spot_light = false;
uniform float first_shrink_speed : hint_range(0.0, 120.0) = 0.0; 
uniform float second_shrink_speed : hint_range(0.0, 120.0) = 0.0; 
//---------------Color Override
uniform vec4 before_light_modulate : hint_color = vec4(1.0,1.0,1.0,1.0);

void fragment() {
	vec4 texture_color = texture(TEXTURE, UV);
	if (AT_LIGHT_PASS) {
		COLOR = texture_color;
	} else {
		COLOR = texture_color * before_light_modulate;
	}
}
float light_calc(float light_strength, float would_be_strength) {
	float target_strength = light_strength + would_be_strength * obj_light_add;
	if (target_strength == 0.0) {target_strength = 0.000001;}
	if (would_be_strength == 0.0) {would_be_strength = 1.0;}
	return(target_strength / would_be_strength);
}

void light() {
	float level_1 = first_stage;
	float level_1_smooth = first_smooth;
	float level_2 = second_stage;
	float level_2_smooth = second_smooth;
	//---- Light height calc start ------------------------------------
	//-----------------------------------------------------------------
	if (fake_light_depth) {
		float base_height = LIGHT_HEIGHT;
		float new_height = base_height - obj_height;
		LIGHT_HEIGHT = new_height;
		if (fake_spot_light && obj_height < base_height && light_change_thresh < new_height ){
			if (level_1 != 1.0) {
				level_1 -= (light_change_thresh - new_height) * (first_shrink_speed * .0001);
				if (level_2 != 0.0 && level_2 != 1.0) {
					level_2 -= (light_change_thresh - new_height) * (second_shrink_speed * .0001);
				}
			}
		}
		if (light_fade && new_height > light_change_thresh) {
			float n_height_safety = new_height;
			if (n_height_safety == 0.0) { n_height_safety += 0.01; }
			float light_dist_safety = light_change_thresh;
			if (light_dist_safety == 0.0) { light_dist_safety += 0.001; }
			float new_intens = 1.0;
			float dark_distance = light_fade_end;
			if (dark_distance == 0.0) {dark_distance = 1.0;}
			new_intens = 1.0 - abs(abs(light_dist_safety) - abs(n_height_safety)) / dark_distance;
			float light_drop_a = clamp(LIGHT_COLOR.a * new_intens, 0.0, 1.0);
			LIGHT_COLOR *= light_drop_a;
		}
	}
	//---- Light height calc end --------------------------------------
	
	float mid_range_light = mid_light;
	if (mid_light == 0.0) { mid_range_light = max_light * 0.5; }
	vec3 light_normal = normalize(vec3(LIGHT_VEC, -LIGHT_HEIGHT));
	float would_be_strength = max(dot(-light_normal, NORMAL), 0.0);
//-----Light Rim start------------------------------------------------------
	if (rim_light) {
		vec2 size = TEXTURE_PIXEL_SIZE * rim_thickness;
		float outline = texture(TEXTURE, UV + vec2(-size.x, 0)).a;
		outline *= texture(TEXTURE, UV + vec2(0, size.y)).a;
		outline *= texture(TEXTURE, UV + vec2(size.x, 0)).a;
		outline *= texture(TEXTURE, UV + vec2(0, -size.y)).a;
		if (rim_extra_thick) {
			outline *= texture(TEXTURE, UV + vec2(-size.x, size.y)).a;
			outline *= texture(TEXTURE, UV + vec2(size.x, size.y)).a;
			outline *= texture(TEXTURE, UV + vec2(-size.x, -size.y)).a;
			outline *= texture(TEXTURE, UV + vec2(size.x, -size.y)).a;
		}
		outline = 1.0 - outline;

		vec4 color = texture(TEXTURE, UV);
		float rim_cap = outline * color.a * rim_intense * (max_light - min_light);
		LIGHT += rim_cap;
	}
	//-----Light Rim end------------------------------------------------------
	if (would_be_strength > level_1 && level_2 == 0.0 ) {
		float diff = smoothstep(level_1, (level_1 + level_1_smooth), would_be_strength) + min_light;
		if (diff >= max_light) {diff = max_light;}
		LIGHT *= light_calc(diff, would_be_strength);
	} else if (would_be_strength > level_1 && would_be_strength < level_2 && level_2 != 0.0 ) {
		float diff = smoothstep(level_1, (level_1 + level_1_smooth), would_be_strength) + min_light;
		if (diff >= mid_range_light ) {diff = mid_range_light;}
		LIGHT *= light_calc(diff, would_be_strength);
	} else if (would_be_strength >= level_2 && level_2 != 0.0 ) {
		float diff = smoothstep(level_2, (level_2 + level_2_smooth), would_be_strength) + mid_range_light;
		if (diff < mid_range_light ) {diff = mid_range_light;}
		if (diff >= max_light) {diff = max_light;}
		LIGHT *= light_calc(diff, would_be_strength);
	} else { 
		if (min_light != 0.0) { 
			LIGHT_VEC = -NORMAL.xy*length(LIGHT_VEC); 
		}
		LIGHT *= min_light;                                                                                                                                  
	}
}"

[sub_resource type="ShaderMaterial" id=206]
resource_local_to_scene = true
shader = SubResource( 1 )
shader_param/speed = 1.0
shader_param/minStrength = 0.05
shader_param/maxStrength = 0.01
shader_param/strengthScale = 200.0
shader_param/interval = 3.5
shader_param/detail = 1.0
shader_param/distortion = null
shader_param/heightOffset = null
shader_param/offset = 0.0
shader_param/first_stage = 0.5
shader_param/first_smooth = 0.0
shader_param/second_stage = 0.0
shader_param/second_smooth = 0.0
shader_param/rim_light = false
shader_param/rim_thickness = 5.0
shader_param/rim_intense = 1.0
shader_param/rim_extra_thick = false
shader_param/min_light = 0.0
shader_param/mid_light = 0.0
shader_param/max_light = 1.0
shader_param/obj_light_add = 0.0
shader_param/fake_light_depth = false
shader_param/obj_height = 0.0
shader_param/min_scale = 0.2
shader_param/max_scale = 2.0
shader_param/light_change_thresh = 0.0
shader_param/light_fade = false
shader_param/light_fade_end = 0.0
shader_param/fake_spot_light = false
shader_param/first_shrink_speed = 0.0
shader_param/second_shrink_speed = 0.0
shader_param/before_light_modulate = Color( 1, 1, 1, 1 )

[sub_resource type="ShaderMaterial" id=207]
resource_local_to_scene = true
shader = SubResource( 1 )
shader_param/speed = 1.0
shader_param/minStrength = 0.05
shader_param/maxStrength = 0.01
shader_param/strengthScale = 200.0
shader_param/interval = 3.5
shader_param/detail = 1.0
shader_param/distortion = null
shader_param/heightOffset = null
shader_param/offset = 0.0
shader_param/first_stage = 0.5
shader_param/first_smooth = 0.0
shader_param/second_stage = 0.0
shader_param/second_smooth = 0.0
shader_param/rim_light = false
shader_param/rim_thickness = 5.0
shader_param/rim_intense = 1.0
shader_param/rim_extra_thick = false
shader_param/min_light = 0.0
shader_param/mid_light = 0.0
shader_param/max_light = 1.0
shader_param/obj_light_add = 0.0
shader_param/fake_light_depth = false
shader_param/obj_height = 0.0
shader_param/min_scale = 0.2
shader_param/max_scale = 2.0
shader_param/light_change_thresh = 0.0
shader_param/light_fade = false
shader_param/light_fade_end = 0.0
shader_param/fake_spot_light = false
shader_param/first_shrink_speed = 0.0
shader_param/second_shrink_speed = 0.0
shader_param/before_light_modulate = Color( 1, 1, 1, 1 )

[sub_resource type="ShaderMaterial" id=208]
resource_local_to_scene = true
shader = SubResource( 1 )
shader_param/speed = 1.0
shader_param/minStrength = 0.05
shader_param/maxStrength = 0.01
shader_param/strengthScale = 200.0
shader_param/interval = 3.5
shader_param/detail = 1.0
shader_param/distortion = null
shader_param/heightOffset = null
shader_param/offset = 0.0
shader_param/first_stage = 0.5
shader_param/first_smooth = 0.0
shader_param/second_stage = 0.0
shader_param/second_smooth = 0.0
shader_param/rim_light = false
shader_param/rim_thickness = 5.0
shader_param/rim_intense = 1.0
shader_param/rim_extra_thick = false
shader_param/min_light = 0.0
shader_param/mid_light = 0.0
shader_param/max_light = 1.0
shader_param/obj_light_add = 0.0
shader_param/fake_light_depth = false
shader_param/obj_height = 0.0
shader_param/min_scale = 0.2
shader_param/max_scale = 2.0
shader_param/light_change_thresh = 0.0
shader_param/light_fade = false
shader_param/light_fade_end = 0.0
shader_param/fake_spot_light = false
shader_param/first_shrink_speed = 0.0
shader_param/second_shrink_speed = 0.0
shader_param/before_light_modulate = Color( 1, 1, 1, 1 )

[sub_resource type="ShaderMaterial" id=209]
resource_local_to_scene = true
shader = SubResource( 1 )
shader_param/speed = 1.0
shader_param/minStrength = 0.05
shader_param/maxStrength = 0.01
shader_param/strengthScale = 200.0
shader_param/interval = 3.5
shader_param/detail = 1.0
shader_param/distortion = null
shader_param/heightOffset = null
shader_param/offset = 0.0
shader_param/first_stage = 0.5
shader_param/first_smooth = 0.0
shader_param/second_stage = 0.0
shader_param/second_smooth = 0.0
shader_param/rim_light = false
shader_param/rim_thickness = 5.0
shader_param/rim_intense = 1.0
shader_param/rim_extra_thick = false
shader_param/min_light = 0.0
shader_param/mid_light = 0.0
shader_param/max_light = 1.0
shader_param/obj_light_add = 0.0
shader_param/fake_light_depth = false
shader_param/obj_height = 0.0
shader_param/min_scale = 0.2
shader_param/max_scale = 2.0
shader_param/light_change_thresh = 0.0
shader_param/light_fade = false
shader_param/light_fade_end = 0.0
shader_param/fake_spot_light = false
shader_param/first_shrink_speed = 0.0
shader_param/second_shrink_speed = 0.0
shader_param/before_light_modulate = Color( 1, 1, 1, 1 )

[sub_resource type="ShaderMaterial" id=210]
resource_local_to_scene = true
shader = SubResource( 1 )
shader_param/speed = 1.0
shader_param/minStrength = 0.05
shader_param/maxStrength = 0.01
shader_param/strengthScale = 200.0
shader_param/interval = 3.5
shader_param/detail = 1.0
shader_param/distortion = null
shader_param/heightOffset = null
shader_param/offset = 0.0
shader_param/first_stage = 0.5
shader_param/first_smooth = 0.0
shader_param/second_stage = 0.0
shader_param/second_smooth = 0.0
shader_param/rim_light = false
shader_param/rim_thickness = 5.0
shader_param/rim_intense = 1.0
shader_param/rim_extra_thick = false
shader_param/min_light = 0.0
shader_param/mid_light = 0.0
shader_param/max_light = 1.0
shader_param/obj_light_add = 0.0
shader_param/fake_light_depth = false
shader_param/obj_height = 0.0
shader_param/min_scale = 0.2
shader_param/max_scale = 2.0
shader_param/light_change_thresh = 0.0
shader_param/light_fade = false
shader_param/light_fade_end = 0.0
shader_param/fake_spot_light = false
shader_param/first_shrink_speed = 0.0
shader_param/second_shrink_speed = 0.0
shader_param/before_light_modulate = Color( 1, 1, 1, 1 )

[sub_resource type="Shader" id=211]
code = "// original wind shader from https://github.com/Maujoe/godot-simple-wind-shader-2d/tree/master/assets/maujoe.simple_wind_shader_2d
// original script modified by HungryProton so that the assets are moving differently : https://pastebin.com/VL3AfV8D
//
// speed - The speed of the wind movement.
// minStrength - The minimal strength of the wind movement.
// maxStrength - The maximal strength of the wind movement.
// strengthScale - Scalefactor for the wind strength.
// interval - The time between minimal and maximal strength changes.
// detail - The detail (number of waves) of the wind movement.
// distortion - The strength of geometry distortion.
// heightOffset - The height where the wind begins to move. By default 0.0.

shader_type canvas_item;
render_mode blend_mix;

// Wind settings.
uniform float speed = 1.0;
uniform float minStrength : hint_range(0.0, 1.0) = 0.05;
uniform float maxStrength : hint_range(0.0, 1.0) = 0.01;
uniform float strengthScale = 100.0;
uniform float interval = 3.5;
uniform float detail = 1.0;
uniform float distortion : hint_range(0.0, 1.0);
uniform float heightOffset : hint_range(0.0, 1.0);

// With the offset value, you can if you want different moves for each asset. Just put a random value (1, 2, 3) in the editor. Don't forget to mark the material as unique if you use this
uniform float offset = 0; 


float getWind(vec2 vertex, vec2 uv, float time){
    float diff = pow(maxStrength - minStrength, 2.0);
    float strength = clamp(minStrength + diff + sin(time / interval) * diff, minStrength, maxStrength) * strengthScale;
    float wind = (sin(time) + cos(time * detail)) * strength * max(0.0, (1.0-uv.y) - heightOffset);
    
    return wind; 
}

void vertex() {
    vec4 pos = WORLD_MATRIX * vec4(0.0, 0.0, 0.0, 1.0);
    float time = TIME * speed + offset;
    //float time = TIME * speed + pos.x * pos.y  ; not working when moving...
    VERTEX.x += getWind(VERTEX.xy, UV, time);
}

uniform float first_stage : hint_range(0.0, 1.0) = 0.5; 
uniform float first_smooth : hint_range(0.0, 1.0) = 0.0; // Lengthens the color transition
uniform float second_stage : hint_range(0.0, 1.0) = 0.0;   // If left at 0, only level 1 is used.
uniform float second_smooth : hint_range(0.0, 1.0) = 0.0;
uniform bool rim_light = false;
uniform float rim_thickness : hint_range(0, 40) = 5.0;
uniform float rim_intense : hint_range(0, 1) = 1.0;
uniform bool rim_extra_thick = false;
uniform float min_light : hint_range(0.0, 1.0) = 0.0;
uniform float mid_light : hint_range(0.0, 1.0) = 0.0;
uniform float max_light : hint_range(0.0, 1.0) = 1.0;
uniform float obj_light_add : hint_range(0.0, 1.0) = 0.0;
// Light height variables
uniform bool fake_light_depth = false;
uniform float obj_height : hint_range(-2048.0, 2048.0) = 0.0; 
uniform float min_scale : hint_range(0.0, 10.0) = 0.2;
uniform float max_scale : hint_range(0.0, 10.0) = 2.0; 
uniform float light_change_thresh : hint_range(0.0, 4080.0) = 0.0;
uniform bool light_fade = false;
uniform float light_fade_end : hint_range(0.0, 4080.0) = 0.0;
uniform bool fake_spot_light = false;
uniform float first_shrink_speed : hint_range(0.0, 120.0) = 0.0; 
uniform float second_shrink_speed : hint_range(0.0, 120.0) = 0.0; 
//---------------Color Override
uniform vec4 before_light_modulate : hint_color = vec4(1.0,1.0,1.0,1.0);

void fragment() {
	vec4 texture_color = texture(TEXTURE, UV);
	if (AT_LIGHT_PASS) {
		COLOR = texture_color;
	} else {
		COLOR = texture_color * before_light_modulate;
	}
}
float light_calc(float light_strength, float would_be_strength) {
	float target_strength = light_strength + would_be_strength * obj_light_add;
	if (target_strength == 0.0) {target_strength = 0.000001;}
	if (would_be_strength == 0.0) {would_be_strength = 1.0;}
	return(target_strength / would_be_strength);
}

void light() {
	float level_1 = first_stage;
	float level_1_smooth = first_smooth;
	float level_2 = second_stage;
	float level_2_smooth = second_smooth;
	//---- Light height calc start ------------------------------------
	//-----------------------------------------------------------------
	if (fake_light_depth) {
		float base_height = LIGHT_HEIGHT;
		float new_height = base_height - obj_height;
		LIGHT_HEIGHT = new_height;
		if (fake_spot_light && obj_height < base_height && light_change_thresh < new_height ){
			if (level_1 != 1.0) {
				level_1 -= (light_change_thresh - new_height) * (first_shrink_speed * .0001);
				if (level_2 != 0.0 && level_2 != 1.0) {
					level_2 -= (light_change_thresh - new_height) * (second_shrink_speed * .0001);
				}
			}
		}
		if (light_fade && new_height > light_change_thresh) {
			float n_height_safety = new_height;
			if (n_height_safety == 0.0) { n_height_safety += 0.01; }
			float light_dist_safety = light_change_thresh;
			if (light_dist_safety == 0.0) { light_dist_safety += 0.001; }
			float new_intens = 1.0;
			float dark_distance = light_fade_end;
			if (dark_distance == 0.0) {dark_distance = 1.0;}
			new_intens = 1.0 - abs(abs(light_dist_safety) - abs(n_height_safety)) / dark_distance;
			float light_drop_a = clamp(LIGHT_COLOR.a * new_intens, 0.0, 1.0);
			LIGHT_COLOR *= light_drop_a;
		}
	}
	//---- Light height calc end --------------------------------------
	
	float mid_range_light = mid_light;
	if (mid_light == 0.0) { mid_range_light = max_light * 0.5; }
	vec3 light_normal = normalize(vec3(LIGHT_VEC, -LIGHT_HEIGHT));
	float would_be_strength = max(dot(-light_normal, NORMAL), 0.0);
//-----Light Rim start------------------------------------------------------
	if (rim_light) {
		vec2 size = TEXTURE_PIXEL_SIZE * rim_thickness;
		float outline = texture(TEXTURE, UV + vec2(-size.x, 0)).a;
		outline *= texture(TEXTURE, UV + vec2(0, size.y)).a;
		outline *= texture(TEXTURE, UV + vec2(size.x, 0)).a;
		outline *= texture(TEXTURE, UV + vec2(0, -size.y)).a;
		if (rim_extra_thick) {
			outline *= texture(TEXTURE, UV + vec2(-size.x, size.y)).a;
			outline *= texture(TEXTURE, UV + vec2(size.x, size.y)).a;
			outline *= texture(TEXTURE, UV + vec2(-size.x, -size.y)).a;
			outline *= texture(TEXTURE, UV + vec2(size.x, -size.y)).a;
		}
		outline = 1.0 - outline;

		vec4 color = texture(TEXTURE, UV);
		float rim_cap = outline * color.a * rim_intense * (max_light - min_light);
		LIGHT += rim_cap;
	}
	//-----Light Rim end------------------------------------------------------
	if (would_be_strength > level_1 && level_2 == 0.0 ) {
		float diff = smoothstep(level_1, (level_1 + level_1_smooth), would_be_strength) + min_light;
		if (diff >= max_light) {diff = max_light;}
		LIGHT *= light_calc(diff, would_be_strength);
	} else if (would_be_strength > level_1 && would_be_strength < level_2 && level_2 != 0.0 ) {
		float diff = smoothstep(level_1, (level_1 + level_1_smooth), would_be_strength) + min_light;
		if (diff >= mid_range_light ) {diff = mid_range_light;}
		LIGHT *= light_calc(diff, would_be_strength);
	} else if (would_be_strength >= level_2 && level_2 != 0.0 ) {
		float diff = smoothstep(level_2, (level_2 + level_2_smooth), would_be_strength) + mid_range_light;
		if (diff < mid_range_light ) {diff = mid_range_light;}
		if (diff >= max_light) {diff = max_light;}
		LIGHT *= light_calc(diff, would_be_strength);
	} else { 
		if (min_light != 0.0) { 
			LIGHT_VEC = -NORMAL.xy*length(LIGHT_VEC); 
		}
		LIGHT *= min_light;                                                                                                                                  
	}
}"

[sub_resource type="ShaderMaterial" id=212]
resource_local_to_scene = true
shader = SubResource( 211 )
shader_param/speed = 1.0
shader_param/minStrength = 0.05
shader_param/maxStrength = 0.01
shader_param/strengthScale = 200.0
shader_param/interval = 3.5
shader_param/detail = 1.0
shader_param/distortion = null
shader_param/heightOffset = null
shader_param/offset = 0.0
shader_param/first_stage = 0.126
shader_param/first_smooth = 0.0
shader_param/second_stage = 0.0
shader_param/second_smooth = 0.0
shader_param/rim_light = true
shader_param/rim_thickness = 2.576
shader_param/rim_intense = 1.0
shader_param/rim_extra_thick = false
shader_param/min_light = 0.0
shader_param/mid_light = 0.0
shader_param/max_light = 0.449
shader_param/obj_light_add = 0.0
shader_param/fake_light_depth = false
shader_param/obj_height = 0.0
shader_param/min_scale = 0.2
shader_param/max_scale = 2.0
shader_param/light_change_thresh = 0.0
shader_param/light_fade = false
shader_param/light_fade_end = 0.0
shader_param/fake_spot_light = false
shader_param/first_shrink_speed = 0.0
shader_param/second_shrink_speed = 0.0
shader_param/before_light_modulate = Color( 1, 1, 1, 1 )

[sub_resource type="ShaderMaterial" id=213]
resource_local_to_scene = true
shader = SubResource( 211 )
shader_param/speed = 1.0
shader_param/minStrength = 0.05
shader_param/maxStrength = 0.01
shader_param/strengthScale = 200.0
shader_param/interval = 3.5
shader_param/detail = 1.0
shader_param/distortion = null
shader_param/heightOffset = null
shader_param/offset = 0.0
shader_param/first_stage = 0.126
shader_param/first_smooth = 0.0
shader_param/second_stage = 0.0
shader_param/second_smooth = 0.0
shader_param/rim_light = true
shader_param/rim_thickness = 2.576
shader_param/rim_intense = 1.0
shader_param/rim_extra_thick = false
shader_param/min_light = 0.0
shader_param/mid_light = 0.0
shader_param/max_light = 0.449
shader_param/obj_light_add = 0.0
shader_param/fake_light_depth = false
shader_param/obj_height = 0.0
shader_param/min_scale = 0.2
shader_param/max_scale = 2.0
shader_param/light_change_thresh = 0.0
shader_param/light_fade = false
shader_param/light_fade_end = 0.0
shader_param/fake_spot_light = false
shader_param/first_shrink_speed = 0.0
shader_param/second_shrink_speed = 0.0
shader_param/before_light_modulate = Color( 1, 1, 1, 1 )

[sub_resource type="Shader" id=202]
code = "shader_type canvas_item;

uniform float first_stage : hint_range(0.0, 1.0) = 0.5; 
uniform float first_smooth : hint_range(0.0, 1.0) = 0.0; // Lengthens the color transition
uniform float second_stage : hint_range(0.0, 1.0) = 0.0;   // If left at 0, only level 1 is used.
uniform float second_smooth : hint_range(0.0, 1.0) = 0.0;
uniform bool rim_light = false;
uniform float rim_thickness : hint_range(0, 40) = 5.0;
uniform float rim_intense : hint_range(0, 1) = 1.0;
uniform bool rim_extra_thick = false;
uniform float min_light : hint_range(0.0, 1.0) = 0.0;
uniform float mid_light : hint_range(0.0, 1.0) = 0.0;
uniform float max_light : hint_range(0.0, 1.0) = 1.0;
uniform float obj_light_add : hint_range(0.0, 1.0) = 0.0;
// Light height variables
uniform bool fake_light_depth = false;
uniform float obj_height : hint_range(-2048.0, 2048.0) = 0.0; 
uniform float min_scale : hint_range(0.0, 10.0) = 0.2;
uniform float max_scale : hint_range(0.0, 10.0) = 2.0; 
uniform float light_change_thresh : hint_range(0.0, 4080.0) = 0.0;
uniform bool light_fade = false;
uniform float light_fade_end : hint_range(0.0, 4080.0) = 0.0;
uniform bool fake_spot_light = false;
uniform float first_shrink_speed : hint_range(0.0, 120.0) = 0.0; 
uniform float second_shrink_speed : hint_range(0.0, 120.0) = 0.0; 
//---------------Color Override
uniform vec4 before_light_modulate : hint_color = vec4(1.0,1.0,1.0,1.0);

void fragment() {
	vec4 texture_color = texture(TEXTURE, UV);
	if (AT_LIGHT_PASS) {
		COLOR = texture_color;
	} else {
		COLOR = texture_color * before_light_modulate;
	}
}
float light_calc(float light_strength, float would_be_strength) {
	float target_strength = light_strength + would_be_strength * obj_light_add;
	if (target_strength == 0.0) {target_strength = 0.000001;}
	if (would_be_strength == 0.0) {would_be_strength = 1.0;}
	return(target_strength / would_be_strength);
}

void light() {
	float level_1 = first_stage;
	float level_1_smooth = first_smooth;
	float level_2 = second_stage;
	float level_2_smooth = second_smooth;
	//---- Light height calc start ------------------------------------
	//-----------------------------------------------------------------
	if (fake_light_depth) {
		float base_height = LIGHT_HEIGHT;
		float new_height = base_height - obj_height;
		LIGHT_HEIGHT = new_height;
		if (fake_spot_light && obj_height < base_height && light_change_thresh < new_height ){
			if (level_1 != 1.0) {
				level_1 -= (light_change_thresh - new_height) * (first_shrink_speed * .0001);
				if (level_2 != 0.0 && level_2 != 1.0) {
					level_2 -= (light_change_thresh - new_height) * (second_shrink_speed * .0001);
				}
			}
		}
		if (light_fade && new_height > light_change_thresh) {
			float n_height_safety = new_height;
			if (n_height_safety == 0.0) { n_height_safety += 0.01; }
			float light_dist_safety = light_change_thresh;
			if (light_dist_safety == 0.0) { light_dist_safety += 0.001; }
			float new_intens = 1.0;
			float dark_distance = light_fade_end;
			if (dark_distance == 0.0) {dark_distance = 1.0;}
			new_intens = 1.0 - abs(abs(light_dist_safety) - abs(n_height_safety)) / dark_distance;
			float light_drop_a = clamp(LIGHT_COLOR.a * new_intens, 0.0, 1.0);
			LIGHT_COLOR *= light_drop_a;
		}
	}
	//---- Light height calc end --------------------------------------
	
	float mid_range_light = mid_light;
	if (mid_light == 0.0) { mid_range_light = max_light * 0.5; }
	vec3 light_normal = normalize(vec3(LIGHT_VEC, -LIGHT_HEIGHT));
	float would_be_strength = max(dot(-light_normal, NORMAL), 0.0);
//-----Light Rim start------------------------------------------------------
	if (rim_light) {
		vec2 size = TEXTURE_PIXEL_SIZE * rim_thickness;
		float outline = texture(TEXTURE, UV + vec2(-size.x, 0)).a;
		outline *= texture(TEXTURE, UV + vec2(0, size.y)).a;
		outline *= texture(TEXTURE, UV + vec2(size.x, 0)).a;
		outline *= texture(TEXTURE, UV + vec2(0, -size.y)).a;
		if (rim_extra_thick) {
			outline *= texture(TEXTURE, UV + vec2(-size.x, size.y)).a;
			outline *= texture(TEXTURE, UV + vec2(size.x, size.y)).a;
			outline *= texture(TEXTURE, UV + vec2(-size.x, -size.y)).a;
			outline *= texture(TEXTURE, UV + vec2(size.x, -size.y)).a;
		}
		outline = 1.0 - outline;

		vec4 color = texture(TEXTURE, UV);
		float rim_cap = outline * color.a * rim_intense * (max_light - min_light);
		LIGHT += rim_cap;
	}
	//-----Light Rim end------------------------------------------------------
	if (would_be_strength > level_1 && level_2 == 0.0 ) {
		float diff = smoothstep(level_1, (level_1 + level_1_smooth), would_be_strength) + min_light;
		if (diff >= max_light) {diff = max_light;}
		LIGHT *= light_calc(diff, would_be_strength);
	} else if (would_be_strength > level_1 && would_be_strength < level_2 && level_2 != 0.0 ) {
		float diff = smoothstep(level_1, (level_1 + level_1_smooth), would_be_strength) + min_light;
		if (diff >= mid_range_light ) {diff = mid_range_light;}
		LIGHT *= light_calc(diff, would_be_strength);
	} else if (would_be_strength >= level_2 && level_2 != 0.0 ) {
		float diff = smoothstep(level_2, (level_2 + level_2_smooth), would_be_strength) + mid_range_light;
		if (diff < mid_range_light ) {diff = mid_range_light;}
		if (diff >= max_light) {diff = max_light;}
		LIGHT *= light_calc(diff, would_be_strength);
	} else { 
		if (min_light != 0.0) { 
			LIGHT_VEC = -NORMAL.xy*length(LIGHT_VEC); 
		}
		LIGHT *= min_light;                                                                                                                                  
	}
}"

[sub_resource type="ShaderMaterial" id=203]
shader = SubResource( 202 )
shader_param/first_stage = 0.08
shader_param/first_smooth = 0.0
shader_param/second_stage = 0.422
shader_param/second_smooth = 0.071
shader_param/rim_light = true
shader_param/rim_thickness = 5.0
shader_param/rim_intense = 1.0
shader_param/rim_extra_thick = false
shader_param/min_light = 0.0
shader_param/mid_light = 0.641
shader_param/max_light = 1.0
shader_param/obj_light_add = 0.0
shader_param/fake_light_depth = false
shader_param/obj_height = 0.0
shader_param/min_scale = 0.2
shader_param/max_scale = 2.0
shader_param/light_change_thresh = 0.0
shader_param/light_fade = false
shader_param/light_fade_end = 0.0
shader_param/fake_spot_light = false
shader_param/first_shrink_speed = 0.0
shader_param/second_shrink_speed = 0.0
shader_param/before_light_modulate = Color( 1, 1, 1, 1 )

[sub_resource type="ConvexPolygonShape2D" id=104]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=105]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=106]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=107]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=108]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=109]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=110]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=111]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=112]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=113]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=114]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=115]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=116]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=117]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=118]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=119]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=120]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=121]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=122]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=123]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=124]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=125]
points = PoolVector2Array( 0, 320, 320, 320, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=126]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=127]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=128]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=129]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=130]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=131]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=132]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=133]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=134]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=135]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=136]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=137]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=138]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=139]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=140]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=141]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=142]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=143]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=144]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=145]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=146]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=147]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=148]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=149]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=150]
points = PoolVector2Array( 0, 0, 320, 0, 320, 320, 0, 320 )

[sub_resource type="ConvexPolygonShape2D" id=151]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="ConvexPolygonShape2D" id=152]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="ConvexPolygonShape2D" id=153]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="ConvexPolygonShape2D" id=154]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="ConvexPolygonShape2D" id=155]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="ConvexPolygonShape2D" id=156]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="ConvexPolygonShape2D" id=157]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="ConvexPolygonShape2D" id=158]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="ConvexPolygonShape2D" id=159]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="ConvexPolygonShape2D" id=160]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="ConvexPolygonShape2D" id=161]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="ConvexPolygonShape2D" id=162]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="ConvexPolygonShape2D" id=163]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="ConvexPolygonShape2D" id=164]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="ConvexPolygonShape2D" id=165]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="ConvexPolygonShape2D" id=166]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="ConvexPolygonShape2D" id=167]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="ConvexPolygonShape2D" id=168]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="ConvexPolygonShape2D" id=169]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="ConvexPolygonShape2D" id=170]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="ConvexPolygonShape2D" id=171]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="ConvexPolygonShape2D" id=172]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="ConvexPolygonShape2D" id=173]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="ConvexPolygonShape2D" id=174]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="ConvexPolygonShape2D" id=175]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="ConvexPolygonShape2D" id=176]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="ConvexPolygonShape2D" id=177]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="ConvexPolygonShape2D" id=178]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="ConvexPolygonShape2D" id=179]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="ConvexPolygonShape2D" id=180]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="ConvexPolygonShape2D" id=181]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="ConvexPolygonShape2D" id=182]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="ConvexPolygonShape2D" id=183]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="ConvexPolygonShape2D" id=184]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="ConvexPolygonShape2D" id=185]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="ConvexPolygonShape2D" id=186]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="ConvexPolygonShape2D" id=187]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="ConvexPolygonShape2D" id=188]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="ConvexPolygonShape2D" id=189]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="ConvexPolygonShape2D" id=190]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="ConvexPolygonShape2D" id=191]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="ConvexPolygonShape2D" id=192]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="ConvexPolygonShape2D" id=193]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="ConvexPolygonShape2D" id=194]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="ConvexPolygonShape2D" id=195]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="ConvexPolygonShape2D" id=196]
points = PoolVector2Array( 0, 0, 336, 0, 336, 336, 0, 336 )

[sub_resource type="TileSet" id=197]
resource_local_to_scene = true
2/name = "Grass Tile Pack 2160p.png 2"
2/texture = ExtResource( 1 )
2/tex_offset = Vector2( 0, 0 )
2/modulate = Color( 1, 1, 1, 1 )
2/region = Rect2( 0, 7, 3840, 1600 )
2/tile_mode = 1
2/autotile/bitmask_mode = 1
2/autotile/bitmask_flags = [ Vector2( 0, 0 ), 144, Vector2( 0, 1 ), 146, Vector2( 0, 2 ), 18, Vector2( 1, 0 ), 176, Vector2( 1, 1 ), 178, Vector2( 1, 2 ), 50, Vector2( 2, 0 ), 184, Vector2( 2, 1 ), 186, Vector2( 2, 2 ), 58, Vector2( 3, 0 ), 152, Vector2( 3, 1 ), 154, Vector2( 3, 2 ), 26, Vector2( 4, 0 ), 187, Vector2( 4, 1 ), 434, Vector2( 4, 2 ), 182, Vector2( 4, 3 ), 250, Vector2( 5, 0 ), 440, Vector2( 5, 1 ), 510, Vector2( 5, 2 ), 447, Vector2( 5, 3 ), 62, Vector2( 6, 0 ), 248, Vector2( 6, 1 ), 507, Vector2( 6, 2 ), 255, Vector2( 6, 3 ), 59, Vector2( 7, 0 ), 190, Vector2( 7, 1 ), 218, Vector2( 7, 2 ), 155, Vector2( 7, 3 ), 442, Vector2( 8, 0 ), 432, Vector2( 8, 1 ), 438, Vector2( 8, 2 ), 446, Vector2( 8, 3 ), 54, Vector2( 9, 0 ), 506, Vector2( 9, 1 ), 254, Vector2( 9, 2 ), 511, Vector2( 9, 3 ), 63, Vector2( 9, 4 ), 504, Vector2( 10, 0 ), 504, Vector2( 10, 2 ), 443, Vector2( 10, 3 ), 191, Vector2( 10, 4 ), 504, Vector2( 11, 0 ), 216, Vector2( 11, 1 ), 251, Vector2( 11, 2 ), 219, Vector2( 11, 3 ), 27, Vector2( 11, 4 ), 504 ]
2/autotile/icon_coordinate = Vector2( 0, 0 )
2/autotile/tile_size = Vector2( 336, 336 )
2/autotile/spacing = 0
2/autotile/occluder_map = [  ]
2/autotile/navpoly_map = [  ]
2/autotile/priority_map = [  ]
2/autotile/z_index_map = [  ]
2/occluder_offset = Vector2( 0, 0 )
2/navigation_offset = Vector2( 0, 0 )
2/shape_offset = Vector2( 0, 0 )
2/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
2/shape = SubResource( 104 )
2/shape_one_way = false
2/shape_one_way_margin = 1.0
2/shapes = [ {
"autotile_coord": Vector2( 0, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 104 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 0, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 105 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 0, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 106 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 1, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 107 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 1, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 108 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 1, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 109 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 2, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 110 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 2, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 111 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 2, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 112 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 3, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 113 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 3, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 114 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 3, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 115 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 4, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 116 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 4, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 117 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 4, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 118 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 4, 3 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 119 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 5, 3 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 120 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 5, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 121 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 5, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 122 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 5, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 123 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 6, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 124 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 6, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 125 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 6, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 126 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 6, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 127 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 6, 3 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 128 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 7, 3 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 129 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 7, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 130 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 7, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 131 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 7, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 132 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 8, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 133 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 8, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 134 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 8, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 135 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 8, 3 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 136 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 9, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 137 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 9, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 138 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 9, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 139 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 9, 3 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 140 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 10, 3 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 141 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 11, 3 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 142 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 10, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 143 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 11, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 144 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 11, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 145 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 11, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 146 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 10, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 147 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 9, 4 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 148 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 10, 4 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 149 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 11, 4 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 150 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
} ]
2/z_index = 0
3/name = "Dirt_Tile_Pack_2160p.png 3"
3/texture = ExtResource( 5 )
3/tex_offset = Vector2( 0, 0 )
3/modulate = Color( 1, 1, 1, 1 )
3/region = Rect2( 0, 7, 4032, 1680 )
3/tile_mode = 1
3/autotile/bitmask_mode = 1
3/autotile/bitmask_flags = [ Vector2( 0, 0 ), 144, Vector2( 0, 1 ), 146, Vector2( 0, 2 ), 18, Vector2( 1, 0 ), 176, Vector2( 1, 1 ), 178, Vector2( 1, 2 ), 50, Vector2( 2, 0 ), 184, Vector2( 2, 1 ), 186, Vector2( 2, 2 ), 58, Vector2( 3, 0 ), 152, Vector2( 3, 1 ), 154, Vector2( 3, 2 ), 26, Vector2( 4, 0 ), 187, Vector2( 4, 1 ), 434, Vector2( 4, 2 ), 182, Vector2( 4, 3 ), 250, Vector2( 5, 0 ), 440, Vector2( 5, 1 ), 510, Vector2( 5, 2 ), 447, Vector2( 5, 3 ), 62, Vector2( 6, 0 ), 248, Vector2( 6, 1 ), 507, Vector2( 6, 2 ), 255, Vector2( 6, 3 ), 59, Vector2( 7, 0 ), 190, Vector2( 7, 1 ), 218, Vector2( 7, 2 ), 155, Vector2( 7, 3 ), 442, Vector2( 8, 0 ), 432, Vector2( 8, 1 ), 438, Vector2( 8, 2 ), 446, Vector2( 8, 3 ), 54, Vector2( 9, 0 ), 506, Vector2( 9, 1 ), 254, Vector2( 9, 2 ), 511, Vector2( 9, 3 ), 63, Vector2( 9, 4 ), 504, Vector2( 10, 0 ), 504, Vector2( 10, 2 ), 443, Vector2( 10, 3 ), 191, Vector2( 10, 4 ), 504, Vector2( 11, 0 ), 216, Vector2( 11, 1 ), 251, Vector2( 11, 2 ), 219, Vector2( 11, 3 ), 27, Vector2( 11, 4 ), 504 ]
3/autotile/icon_coordinate = Vector2( 0, 0 )
3/autotile/tile_size = Vector2( 336, 336 )
3/autotile/spacing = 0
3/autotile/occluder_map = [  ]
3/autotile/navpoly_map = [  ]
3/autotile/priority_map = [  ]
3/autotile/z_index_map = [  ]
3/occluder_offset = Vector2( 0, 0 )
3/navigation_offset = Vector2( 0, 0 )
3/shape_offset = Vector2( 0, 0 )
3/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
3/shape = SubResource( 151 )
3/shape_one_way = false
3/shape_one_way_margin = 1.0
3/shapes = [ {
"autotile_coord": Vector2( 0, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 151 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 0, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 152 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 0, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 153 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 1, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 154 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 1, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 155 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 2, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 156 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 1, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 157 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 2, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 158 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 3, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 159 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 2, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 160 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 3, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 161 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 3, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 162 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 4, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 163 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 4, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 164 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 4, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 165 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 4, 3 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 166 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 5, 3 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 167 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 5, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 168 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 5, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 169 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 5, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 170 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 6, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 171 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 6, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 172 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 6, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 173 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 6, 3 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 174 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 7, 3 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 175 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 7, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 176 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 7, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 177 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 7, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 178 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 8, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 179 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 8, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 180 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 8, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 181 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 8, 3 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 182 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 9, 3 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 183 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 9, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 184 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 9, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 185 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 9, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 186 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 10, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 187 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 11, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 188 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 11, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 189 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 11, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 190 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 10, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 191 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 10, 3 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 192 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 11, 3 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 193 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 9, 4 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 194 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 10, 4 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 195 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 11, 4 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 196 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
} ]
3/z_index = 0

[node name="SecondLevel" type="Node2D"]
pause_mode = 1
material = SubResource( 198 )
script = ExtResource( 14 )
level_range_x = Vector2( 0, 1900 )
level_range_y = Vector2( -250, 500 )

[node name="ParallaxBackground" type="ParallaxBackground" parent="."]

[node name="ParallaxLayer4" type="ParallaxLayer" parent="ParallaxBackground"]
material = SubResource( 200 )
use_parent_material = true
motion_scale = Vector2( 0.1, 1 )

[node name="BackgroundColor" type="Sprite" parent="ParallaxBackground/ParallaxLayer4"]
light_mask = 0
position = Vector2( 2342, 71 )
scale = Vector2( 1.28708, 1.26111 )
z_index = -100
texture = ExtResource( 8 )

[node name="ParallaxLayer3" type="ParallaxLayer" parent="ParallaxBackground"]
light_mask = 2
z_index = -75
motion_scale = Vector2( 0.25, 1 )

[node name="ForestBackground3" parent="ParallaxBackground/ParallaxLayer3" instance=ExtResource( 7 )]
material = SubResource( 206 )
cell_size = Vector2( 32, 32 )
tile_data = PoolIntArray( 65587, 7, 0, 196624, 8, 0, 262181, 6, 0 )

[node name="ScatterTerrain" parent="ParallaxBackground/ParallaxLayer3" instance=ExtResource( 12 )]
scale = Vector2( 0.06, 0.06 )
tile_data = PoolIntArray( 2949244, 25, 0 )

[node name="TallTrees" parent="ParallaxBackground/ParallaxLayer3" instance=ExtResource( 7 )]
material = SubResource( 207 )
scale = Vector2( -0.4, 0.4 )
cell_size = Vector2( 32, 32 )
tile_data = PoolIntArray( 65454, 15, 0, 131015, 15, 0, 262105, 17, 0, 262107, 7, 0, 262131, 17, 0, 327675, 7, 0 )

[node name="Clouds" parent="ParallaxBackground/ParallaxLayer3" instance=ExtResource( 16 )]
scale = Vector2( 0.2, 0.2 )
tile_data = PoolIntArray( -786356, 3, 0, -786347, 0, 0, -720886, 0, 0, -720864, 0, 0, -720844, 0, 0, -720839, 3, 0, -589817, 3, 0, -589806, 0, 0, -589790, 0, 0, -589785, 3, 0 )

[node name="Clouds2" parent="ParallaxBackground/ParallaxLayer3" instance=ExtResource( 16 )]
scale = Vector2( -0.2, 0.2 )
tile_data = PoolIntArray( -655387, 0, 0, -655364, 3, 0 )

[node name="BackgroundFloors720p" parent="ParallaxBackground/ParallaxLayer3" instance=ExtResource( 11 )]
position = Vector2( 306.5, 177 )
scale = Vector2( 0.481944, 0.525 )
frame = 3

[node name="BackgroundFloors720p3" parent="ParallaxBackground/ParallaxLayer3" instance=ExtResource( 11 )]
position = Vector2( 902, 133 )
rotation = -0.0248192
scale = Vector2( 0.481944, 0.525 )
frame = 3

[node name="BackgroundFloors720p2" parent="ParallaxBackground/ParallaxLayer3" instance=ExtResource( 11 )]
position = Vector2( 598.276, 157.233 )
rotation = -0.154759
scale = Vector2( 0.36595, 0.525 )
frame = 3

[node name="ParallaxLayer2" type="ParallaxLayer" parent="ParallaxBackground"]
light_mask = 2
z_index = -50
motion_scale = Vector2( 0.5, 1 )

[node name="ScatterTerrain2" parent="ParallaxBackground/ParallaxLayer2" instance=ExtResource( 12 )]
scale = Vector2( 0.1, 0.1 )
tile_data = PoolIntArray( 1376355, 8, 0 )

[node name="ScatterTerrain" parent="ParallaxBackground/ParallaxLayer2" instance=ExtResource( 12 )]
scale = Vector2( 0.06, 0.06 )
tile_data = PoolIntArray( 2556064, 11, 0 )

[node name="ForestBackground2" parent="ParallaxBackground/ParallaxLayer2" instance=ExtResource( 7 )]
material = SubResource( 208 )
cell_size = Vector2( 32, 32 )
tile_data = PoolIntArray( 65603, 14, 0, 196624, 12, 0, 196629, 4, 0, 196652, 5, 0 )

[node name="ShortTrees2" parent="ParallaxBackground/ParallaxLayer2" instance=ExtResource( 9 )]
material = SubResource( 209 )
cell_size = Vector2( 32, 32 )
tile_data = PoolIntArray( 262239, 9, 0, 393294, 3, 0 )

[node name="ShortTrees" parent="ParallaxBackground/ParallaxLayer2" instance=ExtResource( 9 )]
material = SubResource( 210 )
scale = Vector2( -0.35, 0.35 )
cell_size = Vector2( 32, 32 )
tile_data = PoolIntArray( 393156, 9, 0, 589823, 9, 0 )

[node name="BackgroundFloors720p4" parent="ParallaxBackground/ParallaxLayer2" instance=ExtResource( 11 )]
position = Vector2( 624, 159 )
rotation = -0.17469
scale = Vector2( 0.468, 0.386111 )
frame = 1

[node name="BackgroundFloors720p" parent="ParallaxBackground/ParallaxLayer2" instance=ExtResource( 11 )]
position = Vector2( 302, 186 )
scale = Vector2( 0.468, 0.386111 )
frame = 1

[node name="BackgroundFloors720p3" parent="ParallaxBackground/ParallaxLayer2" instance=ExtResource( 11 )]
position = Vector2( 958, 132 )
scale = Vector2( 0.468, 0.386111 )
frame = 1

[node name="BackgroundFloors720p2" parent="ParallaxBackground/ParallaxLayer2" instance=ExtResource( 11 )]
position = Vector2( 92, 180 )
scale = Vector2( 0.468, 0.386111 )
frame = 1

[node name="Clouds" parent="ParallaxBackground/ParallaxLayer2" instance=ExtResource( 16 )]
scale = Vector2( 0.2, 0.2 )
tile_data = PoolIntArray( -720852, 1, 0, -720838, 1, 0, -655348, 1, 0, -655336, 1, 0, -589813, 4, 0 )

[node name="Clouds2" parent="ParallaxBackground/ParallaxLayer2" instance=ExtResource( 16 )]
scale = Vector2( 0.2, 0.2 )
tile_data = PoolIntArray( -720852, 1, 0, -720842, 4, 0, -720838, 1, 0, -720831, 1, 0, -720826, 4, 0, -589826, 4, 0, -655348, 1, 0, -655343, 4, 0, -655336, 1, 0, -589799, 4, 0, -589785, 4, 0, -524273, 1, 0 )

[node name="ParallaxLayer" type="Node2D" parent="."]

[node name="ScatterTerrain" parent="ParallaxLayer" instance=ExtResource( 12 )]
position = Vector2( 29, -75 )
rotation = 0.0917011
tile_data = PoolIntArray( 1769632, 3, 0 )

[node name="ForestBackground" parent="ParallaxLayer" instance=ExtResource( 7 )]
material = SubResource( 212 )
cell_size = Vector2( 16, 16 )
tile_data = PoolIntArray( 114, 10, 0, 289, 9, 0, 65593, 1, 0, 65742, 11, 0, 196615, 9, 0 )

[node name="ScatterTerrain2" parent="ParallaxLayer" instance=ExtResource( 12 )]
tile_data = PoolIntArray( 2293863, 0, 0 )

[node name="ScatterTerrain4" parent="ParallaxLayer" instance=ExtResource( 12 )]
rotation = 2.98768
scale = Vector2( 0.075, -0.075 )
tile_data = PoolIntArray( 3800902, 2, 0 )

[node name="ScatterTerrain3" parent="ParallaxLayer" instance=ExtResource( 12 )]
rotation = -3.14159
scale = Vector2( 0.075, -0.075 )
tile_data = PoolIntArray( 1769272, 0, 0 )

[node name="ScatterTerrain5" parent="ParallaxLayer" instance=ExtResource( 12 )]
rotation = 0.671955
tile_data = PoolIntArray( 262196, 2, 0 )

[node name="UndergroundBackground" parent="ParallaxLayer" instance=ExtResource( 13 )]
use_parent_material = true
position = Vector2( -7, -170 )
scale = Vector2( 0.1, 0.1 )
tile_data = PoolIntArray( 196653, 0, 2, 196654, 0, 196614, 196655, 0, 4, 196657, 0, 3, 196658, 0, 196614, 196659, 0, 4, 262177, 0, 2, 262178, 0, 196614, 262179, 0, 196613, 262180, 0, 196612, 262181, 0, 4, 262187, 0, 2, 262188, 0, 196611, 262189, 0, 131072, 262190, 0, 196610, 262191, 0, 65538, 262192, 0, 196611, 262193, 0, 131073, 262194, 0, 196608, 262195, 0, 65537, 262196, 0, 5, 327710, 0, 3, 327711, 0, 196611, 327712, 0, 196611, 327713, 0, 131073, 327714, 0, 196608, 327715, 0, 196610, 327716, 0, 196610, 327717, 0, 65537, 327718, 0, 196613, 327719, 0, 196612, 327720, 0, 4, 327723, 0, 327681, 327724, 0, 196610, 327725, 0, 131075, 327726, 0, 131077, 327727, 0, 196610, 327728, 0, 131077, 327729, 0, 131076, 327730, 0, 196610, 327731, 0, 196610, 327732, 0, 262144, 393244, 0, 0, 393245, 0, 0, 393246, 0, 131072, 393247, 0, 131075, 393248, 0, 196610, 393249, 0, 131076, 393250, 0, 196608, 393251, 0, 196608, 393252, 0, 131076, 393253, 0, 196608, 393254, 0, 131077, 393255, 0, 196608, 393256, 0, 65538, 393257, 0, 196611, 393258, 0, 196612, 393259, 0, 131073, 393260, 0, 196608, 393261, 0, 196609, 393262, 0, 196608, 393263, 0, 196610, 393264, 0, 131077, 393265, 0, 131074, 393266, 0, 131078, 393267, 0, 196609, 393268, 0, 262146, 458781, 0, 327683, 458782, 0, 131077, 458783, 0, 131076, 458784, 0, 131074, 458785, 0, 131077, 458786, 0, 196609, 458787, 0, 196608, 458788, 0, 196609, 458789, 0, 196610, 458790, 0, 131076, 458791, 0, 196609, 458792, 0, 131074, 458793, 0, 196610, 458794, 0, 131074, 458795, 0, 131076, 458796, 0, 131077, 458797, 0, 131076, 458798, 0, 131077, 458799, 0, 131076, 458800, 0, 131078, 458801, 0, 196610, 458802, 0, 131075, 458803, 0, 196609, 458804, 0, 262147, 524317, 0, 1, 524318, 0, 327680, 524319, 0, 65542, 524320, 0, 196608, 524321, 0, 131074, 524322, 0, 131077, 524323, 0, 196610, 524324, 0, 131077, 524325, 0, 196610, 524326, 0, 131077, 524327, 0, 131076, 524328, 0, 196610, 524329, 0, 196609, 524330, 0, 131077, 524331, 0, 131078, 524332, 0, 131078, 524333, 0, 131075, 524334, 0, 131077, 524335, 0, 196609, 524336, 0, 131078, 524337, 0, 131075, 524338, 0, 196608, 524339, 0, 196609, 524340, 0, 262145, 589855, 0, 0, 589856, 0, 65541, 589857, 0, 131078, 589858, 0, 196608, 589859, 0, 196609, 589860, 0, 131075, 589861, 0, 131075, 589862, 0, 131076, 589863, 0, 196609, 589864, 0, 131078, 589865, 0, 131077, 589866, 0, 196609, 589867, 0, 131076, 589868, 0, 131074, 589869, 0, 131076, 589870, 0, 196608, 589871, 0, 196610, 589872, 0, 196610, 589873, 0, 131074, 589874, 0, 196610, 589875, 0, 131074, 589876, 0, 262147, 655392, 0, 1, 655393, 0, 262149, 655394, 0, 262148, 655395, 0, 262149, 655396, 0, 262150, 655397, 0, 327680, 655398, 0, 262150, 655399, 0, 262149, 655400, 0, 262149, 655401, 0, 262148, 655402, 0, 65542, 655403, 0, 196608, 655404, 0, 196608, 655405, 0, 131074, 655406, 0, 131075, 655407, 0, 131078, 655408, 0, 196609, 655409, 0, 196609, 655410, 0, 65540, 655411, 0, 262149, 655412, 0, 0, 720938, 0, 1, 720939, 0, 262150, 720940, 0, 262148, 720941, 0, 262148, 720942, 0, 65542, 720943, 0, 131077, 720944, 0, 131078, 720945, 0, 131075, 720946, 0, 262146, 720948, 0, 0, 786478, 0, 1, 786479, 0, 262148, 786480, 0, 262148, 786481, 0, 65541, 786482, 0, 65537, 786483, 0, 0, 786484, 0, 0, 852017, 0, 1, 852018, 0, 262148, 852019, 0, 6, 1769642, 0, 0, 1769643, 0, 0, 1769644, 0, 0, 1769645, 0, 0, 1835182, 0, 0, 1835183, 0, 0, 1835184, 0, 0, 1835185, 0, 0, 1835186, 0, 0, 1835187, 0, 0, 1900724, 0, 0, 1900725, 0, 0, 1900726, 0, 0, 1900727, 0, 0, 1900728, 0, 0, 1900729, 0, 0, 1966266, 0, 0, 1966267, 0, 0, 1966268, 0, 0, 1966269, 0, 0, 1966270, 0, 0, 1966271, 0, 0, 2031808, 0, 0, 2031809, 0, 0, 2031810, 0, 0, 2031811, 0, 0 )

[node name="Clouds" parent="ParallaxLayer" instance=ExtResource( 16 )]
position = Vector2( -164, 216 )
scale = Vector2( 0.2275, 0.19 )
tile_data = PoolIntArray( -2293621, 5, 0, -2228085, 5, 0, -1900491, 5, 0, -1769454, 2, 0, -1769431, 2, 0 )

[node name="Clouds2" parent="ParallaxLayer" instance=ExtResource( 16 )]
position = Vector2( -164, 216 )
rotation = -3.14159
scale = Vector2( 0.228, -0.19 )
tile_data = PoolIntArray( -2162825, 5, 0, -1900650, 5, 0, -1835108, 2, 0, -1835074, 2, 0, -1703967, 5, 0, -1703952, 2, 0 )

[node name="ShortTrees" parent="ParallaxLayer" instance=ExtResource( 9 )]
material = SubResource( 213 )
rotation = -3.14159
scale = Vector2( 0.35, -0.35 )
cell_size = Vector2( 16, 16 )
tile_data = PoolIntArray( 524255, 0, 0, 1048513, 7, 0 )

[node name="MintScatter" parent="ParallaxLayer" instance=ExtResource( 24 )]
position = Vector2( 788, 154 )
scale = Vector2( 0.0377976, 0.0375 )

[node name="StartBackground2720p" type="Sprite" parent="."]
position = Vector2( 109, 62 )
scale = Vector2( 0.2, 0.2 )
texture = ExtResource( 4 )

[node name="TinyTree720p" type="Sprite" parent="."]
visible = false
material = SubResource( 203 )
position = Vector2( 346, 66 )
rotation = -3.14159
scale = Vector2( 0.35, -0.35 )
texture = ExtResource( 21 )
normal_map = ExtResource( 22 )
hframes = 6

[node name="GenericDoor" parent="." instance=ExtResource( 2 )]
position = Vector2( 33, 138 )
target_scene = "res://Levels/FirstLevel.tscn"

[node name="JawbreakerEnemy" parent="." instance=ExtResource( 17 )]
position = Vector2( 1378, 324 )

[node name="GodRays" type="Sprite" parent="."]
material = ExtResource( 19 )
position = Vector2( 3457, 372 )
scale = Vector2( 0.185748, 0.686472 )
z_index = 4
texture = ExtResource( 18 )

[node name="TileMap" parent="." instance=ExtResource( 3 )]
position = Vector2( 1, -189 )
scale = Vector2( 0.14, 0.14 )
z_index = 5
tile_set = SubResource( 197 )
tile_data = PoolIntArray( -1048579, 2, 8, -1048578, 2, 262154, -1048577, 2, 262155, -1114112, 2, 262155, -1114111, 2, 262154, -1114110, 2, 262153, -1114109, 2, 262153, -1114108, 2, 262155, -1114107, 2, 10, -1114106, 2, 262155, -1114105, 2, 262154, -1114104, 2, 10, -1114103, 2, 10, -1114102, 2, 10, -1114101, 2, 10, -1114100, 2, 262153, -1114099, 2, 262154, -1114098, 2, 10, -1114097, 2, 262154, -1114096, 2, 262155, -1114095, 2, 262153, -1114094, 2, 10, -1114093, 2, 262154, -1114092, 2, 262154, -1114091, 2, 262154, -1114090, 2, 262153, -1114089, 2, 10, -1114088, 2, 262154, -1114087, 2, 262154, -1114086, 2, 262154, -1114085, 2, 262153, -1114084, 2, 10, -1114083, 2, 262154, -1114082, 2, 262153, -1114081, 2, 262155, -1114080, 2, 262155, -1114079, 2, 262153, -1114078, 2, 262155, -1114077, 2, 262155, -1114076, 2, 10, -1114075, 2, 262154, -1114074, 2, 262154, -1114073, 2, 10, -1114072, 2, 10, -1114071, 2, 262155, -1114070, 2, 262154, -1114069, 2, 10, -1114068, 2, 262153, -1114067, 2, 262153, -1114066, 2, 10, -1114065, 2, 262153, -1114064, 2, 262154, -1114063, 2, 262155, -1114062, 2, 262155, -1114061, 2, 262153, -1114060, 2, 262154, -1114059, 2, 262153, -1114058, 2, 262153, -1114057, 2, 10, -1114056, 2, 262154, -1114055, 2, 262155, -1114054, 2, 262154, -1114053, 2, 10, -1114052, 2, 10, -1114051, 2, 262154, -1114050, 2, 10, -1114049, 2, 10, -1114048, 2, 10, -1114047, 2, 262155, -1114046, 2, 262153, -1114045, 2, 262153, -1114044, 2, 262153, -1114043, 2, 10, -1114042, 2, 262154, -1114041, 2, 262153, -1114040, 2, 262155, -1114039, 2, 262154, -1114038, 2, 262154, -1114037, 2, 262155, -1114036, 2, 10, -1114035, 2, 10, -1114034, 2, 262155, -1114033, 2, 262155, -1114032, 2, 10, -1114031, 2, 10, -1114030, 2, 262154, -1114029, 2, 11, -983043, 2, 65544, -983042, 2, 131081, -983041, 2, 131081, -1048576, 2, 131081, -1048575, 2, 131081, -1048574, 2, 131081, -1048573, 2, 131081, -1048572, 2, 131081, -1048571, 2, 131081, -1048570, 2, 131081, -1048569, 2, 131081, -1048568, 2, 131081, -1048567, 2, 131081, -1048566, 2, 131081, -1048565, 2, 131081, -1048564, 2, 131081, -1048563, 2, 131081, -1048562, 2, 131081, -1048561, 2, 131081, -1048560, 2, 131081, -1048559, 2, 131081, -1048558, 2, 131081, -1048557, 2, 131081, -1048556, 2, 131081, -1048555, 2, 131081, -1048554, 2, 131081, -1048553, 2, 131081, -1048552, 2, 131081, -1048551, 2, 131081, -1048550, 2, 131081, -1048549, 2, 131081, -1048548, 2, 131081, -1048547, 2, 131081, -1048546, 2, 131081, -1048545, 2, 131081, -1048544, 2, 131081, -1048543, 2, 131081, -1048542, 2, 131081, -1048541, 2, 131081, -1048540, 2, 131081, -1048539, 2, 131081, -1048538, 2, 131081, -1048537, 2, 131081, -1048536, 2, 131081, -1048535, 2, 131081, -1048534, 2, 131081, -1048533, 2, 131081, -1048532, 2, 131081, -1048531, 2, 131081, -1048530, 2, 131081, -1048529, 2, 131081, -1048528, 2, 131081, -1048527, 2, 131081, -1048526, 2, 131081, -1048525, 2, 131081, -1048524, 2, 131081, -1048523, 2, 131081, -1048522, 2, 131081, -1048521, 2, 131081, -1048520, 2, 131081, -1048519, 2, 131081, -1048518, 2, 131081, -1048517, 2, 131081, -1048516, 2, 131081, -1048515, 2, 131081, -1048514, 2, 131081, -1048513, 2, 131081, -1048512, 2, 131081, -1048511, 2, 131081, -1048510, 2, 131081, -1048509, 2, 131081, -1048508, 2, 131081, -1048507, 2, 131081, -1048506, 2, 131081, -1048505, 2, 131081, -1048504, 2, 131081, -1048503, 2, 131081, -1048502, 2, 131081, -1048501, 2, 131081, -1048500, 2, 131081, -1048499, 2, 131081, -1048498, 2, 131081, -1048497, 2, 131081, -1048496, 2, 131081, -1048495, 2, 131081, -1048494, 2, 131081, -1048493, 2, 131083, -917507, 2, 65544, -917506, 2, 131081, -917505, 2, 131078, -983040, 2, 196617, -983039, 2, 196617, -983038, 2, 196617, -983037, 2, 196617, -983036, 2, 196617, -983035, 2, 196617, -983034, 2, 196617, -983033, 2, 196617, -983032, 2, 196617, -983031, 2, 196617, -983030, 2, 196617, -983029, 2, 196617, -983028, 2, 196617, -983027, 2, 196617, -983026, 2, 196617, -983025, 2, 196617, -983024, 2, 196617, -983023, 2, 196617, -983022, 2, 196617, -983021, 2, 196617, -983020, 2, 196617, -983019, 2, 196617, -983018, 2, 196617, -983017, 2, 196617, -983016, 2, 196617, -983015, 2, 196617, -983014, 2, 196617, -983013, 2, 196617, -983012, 2, 196617, -983011, 2, 196617, -983010, 2, 196617, -983009, 2, 196617, -983008, 2, 196617, -983007, 2, 196617, -983006, 2, 196617, -983005, 2, 196617, -983004, 2, 196617, -983003, 2, 196617, -983002, 2, 196617, -983001, 2, 196617, -983000, 2, 196617, -982999, 2, 196617, -982998, 2, 196617, -982997, 2, 196617, -982996, 2, 196617, -982995, 2, 196617, -982994, 2, 196617, -982993, 2, 196617, -982992, 2, 196617, -982991, 2, 196617, -982990, 2, 196617, -982989, 2, 196617, -982988, 2, 196617, -982987, 2, 196617, -982986, 2, 196617, -982985, 2, 196617, -982984, 2, 196617, -982983, 2, 196617, -982982, 2, 196617, -982981, 2, 196617, -982980, 2, 196617, -982979, 2, 196617, -982978, 2, 196617, -982977, 2, 196617, -982976, 2, 196617, -982975, 2, 196617, -982974, 2, 196617, -982973, 2, 196617, -982972, 2, 196617, -982971, 2, 196617, -982970, 2, 196617, -982969, 2, 196617, -982968, 2, 196617, -982967, 2, 196617, -982966, 2, 196617, -982965, 2, 196617, -982964, 2, 196617, -982963, 2, 196617, -982962, 2, 196617, -982961, 2, 196617, -982960, 2, 196617, -982959, 2, 131077, -982958, 2, 131081, -982957, 2, 131083, -851971, 2, 65544, -851970, 2, 131081, -851969, 2, 131083, -917423, 2, 65544, -917422, 2, 131081, -917421, 2, 131083, -786435, 2, 65544, -786434, 2, 131081, -786433, 2, 131083, -851887, 2, 65544, -851886, 2, 131081, -851885, 2, 131083, -720899, 2, 65544, -720898, 2, 131081, -720897, 2, 131083, -786351, 2, 65544, -786350, 2, 131081, -786349, 2, 131083, -655363, 2, 65544, -655362, 2, 131081, -655361, 2, 131083, -720815, 2, 65544, -720814, 2, 131081, -720813, 2, 131083, -589827, 2, 65544, -589826, 2, 131081, -589825, 2, 131083, -655279, 2, 65544, -655278, 2, 131081, -655277, 2, 131083, -524291, 2, 65544, -524290, 2, 131081, -524289, 2, 131083, -589743, 2, 65544, -589742, 2, 131081, -589741, 2, 131083, -458755, 2, 65544, -458754, 2, 131081, -458753, 2, 131083, -524207, 2, 65544, -524206, 2, 131081, -524205, 2, 131083, -393219, 2, 65544, -393218, 2, 131081, -393217, 2, 131083, -458671, 2, 65544, -458670, 2, 131081, -458669, 2, 131083, -327683, 2, 65544, -327682, 2, 131081, -327681, 2, 131083, -393135, 2, 65544, -393134, 2, 131081, -393133, 2, 131083, -262147, 2, 65544, -262146, 2, 131081, -262145, 2, 131083, -327599, 2, 65544, -327598, 2, 131081, -327597, 2, 131083, -196611, 2, 65544, -196610, 2, 131081, -196609, 2, 131083, -262063, 2, 65544, -262062, 2, 131081, -262061, 2, 131083, -131075, 2, 65544, -131074, 2, 131081, -131073, 2, 131083, -196527, 2, 65544, -196526, 2, 131081, -196525, 2, 131083, -65539, 2, 65544, -65538, 2, 131081, -65537, 2, 131083, -130991, 2, 65544, -130990, 2, 131081, -130989, 2, 131083, -3, 2, 65544, -2, 2, 131081, -1, 2, 131083, -65455, 2, 65544, -65454, 2, 131081, -65453, 2, 131083, 65533, 2, 65544, 65534, 2, 131081, 65535, 2, 131083, 81, 2, 65544, 82, 2, 131081, 83, 2, 131083, 131069, 2, 65544, 131070, 2, 131081, 131071, 2, 131083, 65617, 2, 65544, 65618, 2, 131081, 65619, 2, 131083, 196605, 2, 65544, 196606, 2, 131081, 196607, 2, 131083, 131153, 2, 65544, 131154, 2, 131081, 131155, 2, 131083, 262141, 2, 65544, 262142, 2, 131081, 262143, 2, 131083, 196689, 2, 65544, 196690, 2, 131081, 196691, 2, 131083, 327677, 2, 65544, 327678, 2, 131081, 327679, 2, 131083, 262195, 2, 8, 262196, 2, 262153, 262197, 2, 262155, 262198, 2, 262155, 262199, 2, 262155, 262200, 2, 262153, 262201, 2, 262155, 262202, 2, 262155, 262203, 2, 262155, 262204, 2, 262153, 262205, 2, 262154, 262206, 2, 262153, 262207, 2, 262154, 262208, 2, 262153, 262209, 2, 262153, 262210, 2, 262154, 262211, 2, 262153, 262212, 2, 262155, 262213, 2, 262155, 262214, 2, 262153, 262215, 2, 11, 262219, 2, 8, 262220, 2, 262155, 262221, 2, 262154, 262222, 2, 262155, 262223, 2, 262153, 262224, 2, 262155, 262225, 2, 65541, 262226, 2, 131081, 262227, 2, 131083, 393213, 2, 65544, 393214, 2, 131081, 393215, 2, 131083, 327730, 2, 8, 327731, 2, 65541, 327732, 2, 131081, 327733, 2, 131081, 327734, 2, 131081, 327735, 2, 131081, 327736, 2, 131081, 327737, 2, 131081, 327738, 2, 131081, 327739, 2, 131081, 327740, 2, 131081, 327741, 2, 131081, 327742, 2, 131081, 327743, 2, 131081, 327744, 2, 131081, 327745, 2, 131081, 327746, 2, 131081, 327747, 2, 131081, 327748, 2, 131081, 327749, 2, 131081, 327750, 2, 131081, 327751, 2, 131083, 327755, 2, 196616, 327756, 2, 131077, 327757, 2, 131081, 327758, 2, 131081, 327759, 2, 131081, 327760, 2, 131081, 327761, 2, 131081, 327762, 2, 131081, 327763, 2, 131083, 458749, 2, 65544, 458750, 2, 131081, 458751, 2, 131083, 393266, 2, 196616, 393267, 2, 131077, 393268, 2, 131081, 393269, 2, 131081, 393270, 2, 131081, 393271, 2, 131081, 393272, 2, 131081, 393273, 2, 131081, 393274, 2, 131081, 393275, 2, 131081, 393276, 2, 131081, 393277, 2, 131081, 393278, 2, 131081, 393279, 2, 131081, 393280, 2, 131081, 393281, 2, 131081, 393282, 2, 131081, 393283, 2, 131081, 393284, 2, 131081, 393285, 2, 131081, 393286, 2, 131078, 393287, 2, 196619, 393292, 2, 196616, 393293, 2, 131077, 393294, 2, 131081, 393295, 2, 131081, 393296, 2, 131081, 393297, 2, 131081, 393298, 2, 131081, 393299, 2, 131083, 524285, 2, 65544, 524286, 2, 131081, 524287, 2, 131083, 458765, 2, 8, 458766, 2, 262153, 458767, 2, 262155, 458768, 2, 262155, 458769, 2, 10, 458770, 2, 262154, 458771, 2, 262154, 458772, 2, 10, 458773, 2, 262155, 458774, 2, 262154, 458775, 2, 262155, 458776, 2, 10, 458777, 2, 262154, 458778, 2, 262153, 458779, 2, 262153, 458780, 2, 262153, 458781, 2, 262154, 458782, 2, 262154, 458783, 2, 262154, 458784, 2, 262155, 458785, 2, 262154, 458786, 2, 262155, 458787, 2, 262155, 458788, 2, 262153, 458789, 2, 262155, 458790, 2, 262154, 458791, 2, 10, 458792, 2, 262153, 458793, 2, 262155, 458794, 2, 262153, 458795, 2, 11, 458803, 2, 196616, 458804, 2, 196617, 458805, 2, 196617, 458806, 2, 196617, 458807, 2, 131077, 458808, 2, 131081, 458809, 2, 131081, 458810, 2, 131081, 458811, 2, 131081, 458812, 2, 131081, 458813, 2, 131081, 458814, 2, 131081, 458815, 2, 131081, 458816, 2, 131081, 458817, 2, 131081, 458818, 2, 131081, 458819, 2, 131081, 458820, 2, 131078, 458821, 2, 196617, 458822, 2, 196619, 458829, 2, 196616, 458830, 2, 196617, 458831, 2, 196617, 458832, 2, 131077, 458833, 3, 131081, 458834, 2, 131081, 458835, 2, 131083, 589821, 2, 65544, 589822, 2, 131081, 589823, 2, 65542, 524288, 2, 262154, 524289, 2, 262153, 524290, 2, 262154, 524291, 2, 262153, 524292, 2, 10, 524293, 2, 262153, 524294, 2, 10, 524295, 2, 10, 524296, 2, 262155, 524297, 2, 262155, 524298, 2, 262154, 524299, 2, 10, 524300, 2, 10, 524301, 2, 65541, 524302, 2, 131081, 524303, 2, 131081, 524304, 2, 131081, 524305, 2, 131081, 524306, 2, 131081, 524307, 2, 131081, 524308, 2, 131081, 524309, 2, 131081, 524310, 2, 131081, 524311, 2, 131081, 524312, 2, 131081, 524313, 2, 131081, 524314, 2, 131081, 524315, 2, 131081, 524316, 2, 131081, 524317, 2, 131081, 524318, 2, 131081, 524319, 2, 131081, 524320, 2, 131081, 524321, 2, 131081, 524322, 2, 131081, 524323, 2, 131081, 524324, 2, 131081, 524325, 2, 131081, 524326, 2, 131081, 524327, 2, 131081, 524328, 2, 131081, 524329, 2, 131081, 524330, 2, 131081, 524331, 2, 65542, 524332, 2, 11, 524343, 2, 196616, 524344, 2, 196617, 524345, 2, 196617, 524346, 2, 131077, 524347, 2, 131081, 524348, 2, 131081, 524349, 2, 131081, 524350, 2, 131081, 524351, 2, 131081, 524352, 2, 131081, 524353, 2, 131081, 524354, 2, 131078, 524355, 2, 196617, 524356, 2, 196619, 524368, 3, 65544, 524369, 3, 131081, 524370, 2, 131081, 524371, 2, 131083, 655357, 2, 65544, 655358, 2, 131081, 655359, 2, 131081, 589824, 2, 131081, 589825, 2, 131081, 589826, 2, 131081, 589827, 2, 131081, 589828, 2, 131081, 589829, 2, 131081, 589830, 2, 131081, 589831, 2, 131081, 589832, 2, 131081, 589833, 2, 131081, 589834, 2, 131081, 589835, 2, 131081, 589836, 2, 131081, 589837, 2, 131081, 589838, 2, 131081, 589839, 2, 131081, 589840, 2, 131081, 589841, 2, 131081, 589842, 2, 131081, 589843, 2, 131081, 589844, 2, 131081, 589845, 2, 131081, 589846, 2, 131081, 589847, 2, 131081, 589848, 2, 131081, 589849, 2, 131081, 589850, 2, 131081, 589851, 2, 131081, 589852, 2, 131081, 589853, 2, 131081, 589854, 2, 131081, 589855, 2, 131081, 589856, 2, 131081, 589857, 2, 131081, 589858, 2, 131081, 589859, 2, 131081, 589860, 2, 131081, 589861, 2, 131081, 589862, 2, 131081, 589863, 2, 131081, 589864, 2, 131081, 589865, 2, 131081, 589866, 2, 131081, 589867, 2, 131081, 589868, 2, 65542, 589869, 2, 11, 589882, 2, 196616, 589883, 2, 131077, 589884, 2, 131081, 589885, 2, 131081, 589886, 2, 131081, 589887, 2, 131081, 589888, 2, 131081, 589889, 2, 131081, 589890, 2, 131083, 589904, 3, 65544, 589905, 3, 131081, 589906, 3, 131081, 589907, 2, 131083, 720893, 2, 65544, 720894, 2, 131081, 720895, 2, 131081, 655360, 2, 131081, 655361, 2, 131081, 655362, 2, 131081, 655363, 2, 131081, 655364, 2, 131081, 655365, 2, 131081, 655366, 2, 131081, 655367, 2, 131081, 655368, 2, 131081, 655369, 2, 131081, 655370, 2, 131081, 655371, 2, 131081, 655372, 2, 131081, 655373, 2, 131081, 655374, 2, 131081, 655375, 2, 131081, 655376, 2, 131081, 655377, 2, 131081, 655378, 2, 131081, 655379, 2, 131081, 655380, 2, 131081, 655381, 2, 131081, 655382, 2, 131081, 655383, 2, 131081, 655384, 2, 131081, 655385, 2, 131081, 655386, 2, 131081, 655387, 2, 131081, 655388, 2, 131081, 655389, 2, 131081, 655390, 2, 131081, 655391, 2, 131081, 655392, 2, 131081, 655393, 2, 131081, 655394, 2, 131081, 655395, 2, 131081, 655396, 2, 131081, 655397, 2, 131081, 655398, 2, 131081, 655399, 2, 131081, 655400, 2, 131081, 655401, 2, 131081, 655402, 2, 131081, 655403, 2, 131081, 655404, 2, 131081, 655405, 3, 65542, 655406, 3, 11, 655419, 2, 196616, 655420, 2, 196617, 655421, 2, 131077, 655422, 2, 131081, 655423, 2, 131081, 655424, 2, 131081, 655425, 2, 131078, 655426, 2, 196619, 655440, 3, 65544, 655441, 3, 131081, 655442, 3, 131081, 655443, 2, 131083, 786429, 2, 65544, 786430, 2, 131081, 786431, 2, 131081, 720896, 2, 131081, 720897, 2, 131081, 720898, 2, 131081, 720899, 2, 131081, 720900, 2, 131081, 720901, 2, 131081, 720902, 2, 131081, 720903, 2, 131081, 720904, 2, 131081, 720905, 2, 131081, 720906, 2, 131081, 720907, 2, 131081, 720908, 2, 131081, 720909, 2, 131081, 720910, 2, 131081, 720911, 2, 131081, 720912, 2, 131081, 720913, 2, 131081, 720914, 2, 131081, 720915, 2, 131081, 720916, 2, 131081, 720917, 2, 131081, 720918, 2, 131081, 720919, 2, 131081, 720920, 2, 131081, 720921, 2, 131081, 720922, 2, 131081, 720923, 2, 131081, 720924, 2, 131081, 720925, 2, 131081, 720926, 2, 131081, 720927, 2, 131081, 720928, 2, 131081, 720929, 2, 131081, 720930, 2, 131081, 720931, 2, 131081, 720932, 2, 131081, 720933, 2, 131081, 720934, 2, 131081, 720935, 2, 131081, 720936, 2, 131081, 720937, 2, 131081, 720938, 2, 131081, 720939, 2, 131081, 720940, 2, 131081, 720941, 2, 131081, 720942, 3, 65542, 720943, 3, 11, 720957, 2, 196616, 720958, 2, 196617, 720959, 2, 196617, 720960, 2, 196617, 720961, 2, 196619, 720975, 3, 8, 720976, 3, 65541, 720977, 3, 131081, 720978, 3, 131081, 720979, 2, 131083, 851965, 2, 196616, 851966, 2, 131077, 851967, 2, 131081, 786432, 2, 131081, 786433, 2, 131081, 786434, 2, 131081, 786435, 2, 131081, 786436, 2, 131081, 786437, 2, 131081, 786438, 2, 131081, 786439, 2, 131081, 786440, 2, 131081, 786441, 2, 131081, 786442, 2, 131081, 786443, 2, 131081, 786444, 2, 131081, 786445, 2, 131081, 786446, 2, 131081, 786447, 2, 131081, 786448, 2, 131081, 786449, 2, 131081, 786450, 2, 131081, 786451, 2, 131081, 786452, 2, 131081, 786453, 2, 131081, 786454, 2, 131081, 786455, 2, 131081, 786456, 2, 131081, 786457, 2, 131081, 786458, 2, 131081, 786459, 2, 131081, 786460, 2, 131081, 786461, 2, 131081, 786462, 2, 131081, 786463, 2, 131081, 786464, 2, 131081, 786465, 2, 131081, 786466, 2, 131081, 786467, 2, 131081, 786468, 2, 131081, 786469, 2, 131081, 786470, 2, 131081, 786471, 2, 131081, 786472, 2, 131081, 786473, 2, 131081, 786474, 2, 131081, 786475, 2, 131081, 786476, 2, 131081, 786477, 2, 131081, 786478, 3, 131081, 786479, 3, 65542, 786480, 3, 11, 786511, 3, 65544, 786512, 3, 131081, 786513, 3, 131081, 786514, 3, 131081, 786515, 2, 131083, 917502, 2, 65544, 917503, 2, 131081, 851968, 2, 131081, 851969, 2, 131081, 851970, 2, 131081, 851971, 2, 131081, 851972, 2, 131081, 851973, 2, 131081, 851974, 2, 131081, 851975, 2, 131081, 851976, 2, 131081, 851977, 2, 131081, 851978, 2, 131081, 851979, 2, 131081, 851980, 2, 131081, 851981, 2, 131081, 851982, 2, 131081, 851983, 2, 131081, 851984, 2, 131081, 851985, 2, 131081, 851986, 2, 131081, 851987, 2, 131081, 851988, 2, 131081, 851989, 2, 131081, 851990, 2, 131081, 851991, 2, 131081, 851992, 2, 131081, 851993, 2, 131081, 851994, 2, 131081, 851995, 2, 131081, 851996, 2, 131081, 851997, 2, 131081, 851998, 2, 131081, 851999, 2, 131081, 852000, 2, 131081, 852001, 2, 131081, 852002, 2, 131081, 852003, 2, 131081, 852004, 2, 131081, 852005, 2, 131081, 852006, 2, 131081, 852007, 2, 131081, 852008, 2, 131081, 852009, 2, 131081, 852010, 2, 131081, 852011, 2, 131081, 852012, 2, 131081, 852013, 3, 131081, 852014, 3, 131081, 852015, 3, 131081, 852016, 3, 65542, 852017, 3, 11, 852046, 3, 8, 852047, 3, 65541, 852048, 3, 131081, 852049, 3, 131081, 852050, 3, 131081, 852051, 2, 131083, 983038, 2, 196616, 983039, 2, 131077, 917504, 2, 131081, 917505, 2, 131081, 917506, 2, 131081, 917507, 2, 131081, 917508, 2, 131081, 917509, 2, 131081, 917510, 2, 131081, 917511, 2, 131081, 917512, 2, 131081, 917513, 2, 131081, 917514, 2, 131081, 917515, 2, 131081, 917516, 2, 131081, 917517, 2, 131081, 917518, 2, 131081, 917519, 2, 131081, 917520, 2, 131081, 917521, 2, 131081, 917522, 2, 131081, 917523, 2, 131081, 917524, 2, 131081, 917525, 2, 131081, 917526, 2, 131081, 917527, 2, 131081, 917528, 2, 131081, 917529, 2, 131081, 917530, 2, 131081, 917531, 2, 131081, 917532, 2, 131081, 917533, 2, 131081, 917534, 2, 131081, 917535, 2, 131081, 917536, 2, 131081, 917537, 2, 131081, 917538, 2, 131081, 917539, 2, 131081, 917540, 2, 131081, 917541, 2, 131081, 917542, 2, 131081, 917543, 2, 131081, 917544, 2, 131081, 917545, 2, 131081, 917546, 2, 131081, 917547, 2, 131081, 917548, 2, 131081, 917549, 3, 131081, 917550, 3, 131081, 917551, 3, 131081, 917552, 3, 131081, 917553, 3, 65542, 917554, 3, 10, 917555, 3, 11, 917582, 3, 65544, 917583, 3, 131081, 917584, 3, 131081, 917585, 3, 131081, 917586, 3, 131081, 917587, 2, 131083, 1048575, 2, 65544, 983040, 2, 131081, 983041, 2, 131081, 983042, 2, 131081, 983043, 2, 131081, 983044, 2, 131081, 983045, 2, 131081, 983046, 2, 131081, 983047, 2, 131081, 983048, 2, 131081, 983049, 2, 131081, 983050, 2, 131081, 983051, 2, 131081, 983052, 2, 131081, 983053, 2, 131081, 983054, 2, 131081, 983055, 2, 131081, 983056, 2, 131081, 983057, 2, 131081, 983058, 2, 131081, 983059, 2, 131081, 983060, 2, 131081, 983061, 2, 131081, 983062, 2, 131081, 983063, 2, 131081, 983064, 2, 131081, 983065, 2, 131081, 983066, 2, 131081, 983067, 3, 131081, 983068, 3, 131081, 983069, 3, 131081, 983070, 3, 131081, 983071, 3, 131081, 983072, 3, 131081, 983073, 2, 131081, 983074, 2, 131081, 983075, 2, 131081, 983076, 2, 131081, 983077, 2, 131081, 983078, 2, 131081, 983079, 2, 131081, 983080, 2, 131081, 983081, 2, 131081, 983082, 2, 131081, 983083, 2, 131081, 983084, 2, 131081, 983085, 3, 131081, 983086, 3, 131081, 983087, 3, 131081, 983088, 3, 131081, 983089, 3, 131081, 983090, 3, 131081, 983091, 3, 65542, 983092, 3, 262154, 983093, 3, 262155, 983094, 3, 10, 983095, 3, 262154, 983096, 3, 262155, 983097, 3, 262154, 983098, 3, 262153, 983099, 3, 262155, 983100, 3, 262154, 983101, 3, 10, 983102, 3, 262154, 983103, 3, 262155, 983104, 3, 262154, 983105, 3, 10, 983106, 3, 262153, 983107, 3, 11, 983117, 3, 8, 983118, 3, 65541, 983119, 3, 131081, 983120, 3, 131081, 983121, 3, 131081, 983122, 3, 131081, 983123, 2, 131083, 1114111, 2, 196616, 1048576, 2, 196617, 1048577, 2, 196617, 1048578, 2, 131077, 1048579, 2, 131081, 1048580, 2, 131081, 1048581, 2, 131081, 1048582, 2, 131081, 1048583, 2, 131081, 1048584, 2, 131081, 1048585, 2, 131081, 1048586, 2, 131081, 1048587, 2, 131081, 1048588, 2, 131081, 1048589, 2, 131081, 1048590, 2, 131081, 1048591, 2, 131081, 1048592, 2, 131081, 1048593, 2, 131081, 1048594, 2, 131081, 1048595, 2, 131081, 1048596, 2, 131081, 1048597, 2, 131081, 1048598, 2, 131081, 1048599, 2, 131081, 1048600, 2, 131081, 1048601, 2, 131081, 1048602, 3, 131081, 1048603, 3, 131081, 1048604, 3, 131081, 1048605, 3, 131081, 1048606, 3, 131081, 1048607, 2, 131081, 1048608, 2, 131081, 1048609, 2, 131081, 1048610, 2, 131081, 1048611, 2, 131081, 1048612, 2, 131081, 1048613, 2, 131081, 1048614, 2, 131081, 1048615, 2, 131081, 1048616, 2, 131081, 1048617, 2, 131081, 1048618, 3, 131081, 1048619, 3, 131081, 1048620, 3, 131081, 1048621, 3, 131081, 1048622, 3, 131081, 1048623, 3, 131081, 1048624, 3, 131081, 1048625, 3, 131081, 1048626, 3, 131081, 1048627, 3, 131081, 1048628, 3, 131081, 1048629, 3, 131081, 1048630, 3, 131081, 1048631, 3, 131081, 1048632, 3, 131081, 1048633, 3, 131081, 1048634, 3, 131081, 1048635, 3, 131081, 1048636, 3, 131081, 1048637, 3, 131081, 1048638, 3, 131081, 1048639, 3, 131081, 1048640, 3, 131081, 1048641, 3, 131081, 1048642, 3, 131081, 1048643, 3, 65542, 1048644, 3, 11, 1048653, 3, 65544, 1048654, 3, 131081, 1048655, 3, 131081, 1048656, 3, 131081, 1048657, 3, 131081, 1048658, 3, 131081, 1048659, 2, 131083, 1114114, 2, 196616, 1114115, 2, 196617, 1114116, 2, 196617, 1114117, 2, 196617, 1114118, 2, 196617, 1114119, 2, 196617, 1114120, 2, 196617, 1114121, 2, 196617, 1114122, 2, 196617, 1114123, 2, 196617, 1114124, 2, 196617, 1114125, 2, 196617, 1114126, 2, 196617, 1114127, 2, 196617, 1114128, 2, 196617, 1114129, 2, 196617, 1114130, 2, 196617, 1114131, 2, 196617, 1114132, 2, 196617, 1114133, 2, 196617, 1114134, 2, 196617, 1114135, 2, 196617, 1114136, 2, 196617, 1114137, 3, 131077, 1114138, 3, 131081, 1114139, 3, 131081, 1114140, 3, 131081, 1114141, 3, 131081, 1114142, 3, 131081, 1114143, 3, 131081, 1114144, 3, 131081, 1114145, 3, 131081, 1114146, 3, 131081, 1114147, 3, 131081, 1114148, 3, 131081, 1114149, 3, 131081, 1114150, 3, 131081, 1114151, 3, 131081, 1114152, 3, 131081, 1114153, 3, 131081, 1114154, 3, 131081, 1114155, 3, 131081, 1114156, 3, 131081, 1114157, 3, 131081, 1114158, 3, 131081, 1114159, 3, 131081, 1114160, 3, 131081, 1114161, 3, 131081, 1114162, 3, 131081, 1114163, 3, 131081, 1114164, 3, 131081, 1114165, 3, 131081, 1114166, 3, 131081, 1114167, 3, 131081, 1114168, 3, 131081, 1114169, 3, 131081, 1114170, 3, 131081, 1114171, 3, 131081, 1114172, 3, 131081, 1114173, 3, 131081, 1114174, 3, 131081, 1114175, 3, 131081, 1114176, 3, 131081, 1114177, 3, 131081, 1114178, 3, 131081, 1114179, 3, 131081, 1114180, 3, 65542, 1114181, 3, 10, 1114182, 3, 10, 1114183, 3, 11, 1114189, 3, 65544, 1114190, 3, 131081, 1114191, 3, 131081, 1114192, 3, 131081, 1114193, 3, 131081, 1114194, 3, 131081, 1114195, 2, 131083, 1179673, 3, 65544, 1179674, 3, 131081, 1179675, 3, 131081, 1179676, 3, 131081, 1179677, 3, 131081, 1179678, 3, 131081, 1179679, 3, 131081, 1179680, 3, 131081, 1179681, 3, 131081, 1179682, 3, 131081, 1179683, 3, 131081, 1179684, 3, 131081, 1179685, 3, 131081, 1179686, 3, 131081, 1179687, 3, 131081, 1179688, 3, 131081, 1179689, 3, 131081, 1179690, 3, 131081, 1179691, 3, 131081, 1179692, 3, 131081, 1179693, 3, 131081, 1179694, 3, 131081, 1179695, 3, 131081, 1179696, 3, 131081, 1179697, 3, 131081, 1179698, 3, 131081, 1179699, 3, 131081, 1179700, 3, 131081, 1179701, 3, 131081, 1179702, 3, 131081, 1179703, 3, 131081, 1179704, 3, 131081, 1179705, 3, 131081, 1179706, 3, 131081, 1179707, 3, 131081, 1179708, 3, 131081, 1179709, 3, 131081, 1179710, 3, 131081, 1179711, 3, 131081, 1179712, 3, 131081, 1179713, 3, 131081, 1179714, 3, 131081, 1179715, 3, 131081, 1179716, 3, 131081, 1179717, 3, 131081, 1179718, 3, 131081, 1179719, 3, 65542, 1179720, 3, 262155, 1179721, 3, 262154, 1179722, 3, 262155, 1179723, 3, 262154, 1179724, 3, 262153, 1179725, 3, 65541, 1179726, 3, 131081, 1179727, 3, 131081, 1179728, 3, 131081, 1179729, 3, 131081, 1179730, 3, 131081, 1179731, 2, 131083, 1245209, 3, 196616, 1245210, 3, 131077, 1245211, 3, 131081, 1245212, 3, 131081, 1245213, 3, 131081, 1245214, 3, 131081, 1245215, 3, 131081, 1245216, 3, 131081, 1245217, 3, 131081, 1245218, 3, 131081, 1245219, 3, 131081, 1245220, 3, 131081, 1245221, 3, 131081, 1245222, 3, 131081, 1245223, 3, 131081, 1245224, 3, 131081, 1245225, 3, 131081, 1245226, 3, 131081, 1245227, 3, 131081, 1245228, 3, 131081, 1245229, 3, 131081, 1245230, 3, 131081, 1245231, 3, 131081, 1245232, 3, 131081, 1245233, 3, 131081, 1245234, 3, 131081, 1245235, 3, 131081, 1245236, 3, 131081, 1245237, 3, 131081, 1245238, 3, 131081, 1245239, 3, 131081, 1245240, 3, 131081, 1245241, 3, 131081, 1245242, 3, 131081, 1245243, 3, 131081, 1245244, 3, 131081, 1245245, 3, 131081, 1245246, 3, 131081, 1245247, 3, 131081, 1245248, 3, 131081, 1245249, 3, 131081, 1245250, 3, 131081, 1245251, 3, 131081, 1245252, 3, 131081, 1245253, 3, 131081, 1245254, 3, 131081, 1245255, 3, 131081, 1245256, 3, 131081, 1245257, 3, 131081, 1245258, 3, 131081, 1245259, 3, 131081, 1245260, 3, 131081, 1245261, 3, 131081, 1245262, 3, 131081, 1245263, 3, 131081, 1245264, 3, 131081, 1245265, 3, 131081, 1245266, 3, 131081, 1245267, 2, 131083, 1310746, 3, 196616, 1310747, 3, 196617, 1310748, 3, 131077, 1310749, 3, 131081, 1310750, 3, 131081, 1310751, 3, 131081, 1310752, 3, 131081, 1310753, 3, 131081, 1310754, 3, 131081, 1310755, 3, 131081, 1310756, 3, 131081, 1310757, 3, 131081, 1310758, 3, 131081, 1310759, 3, 131081, 1310760, 3, 131081, 1310761, 3, 131081, 1310762, 3, 131081, 1310763, 3, 131081, 1310764, 3, 131081, 1310765, 3, 131081, 1310766, 3, 131081, 1310767, 3, 131081, 1310768, 3, 131081, 1310769, 3, 131081, 1310770, 3, 131081, 1310771, 3, 131081, 1310772, 3, 131081, 1310773, 3, 131081, 1310774, 3, 131081, 1310775, 3, 131081, 1310776, 3, 131081, 1310777, 3, 131081, 1310778, 3, 131081, 1310779, 3, 131081, 1310780, 3, 131081, 1310781, 3, 131081, 1310782, 3, 131081, 1310783, 3, 131081, 1310784, 3, 131081, 1310785, 3, 131081, 1310786, 3, 131081, 1310787, 3, 131081, 1310788, 3, 131081, 1310789, 3, 131081, 1310790, 3, 131081, 1310791, 3, 131081, 1310792, 3, 131081, 1310793, 3, 131081, 1310794, 3, 131081, 1310795, 3, 131081, 1310796, 3, 131081, 1310797, 3, 131081, 1310798, 3, 131081, 1310799, 3, 131081, 1310800, 3, 131081, 1310801, 3, 131081, 1310802, 3, 131081, 1310803, 2, 131083, 1376284, 3, 196616, 1376285, 3, 131077, 1376286, 3, 131081, 1376287, 3, 131081, 1376288, 3, 131081, 1376289, 3, 131081, 1376290, 3, 131081, 1376291, 3, 131081, 1376292, 3, 131081, 1376293, 3, 131081, 1376294, 3, 131081, 1376295, 3, 131081, 1376296, 3, 131081, 1376297, 3, 131081, 1376298, 3, 131081, 1376299, 3, 131081, 1376300, 3, 131081, 1376301, 3, 131081, 1376302, 3, 131081, 1376303, 3, 131081, 1376304, 3, 131081, 1376305, 3, 131081, 1376306, 3, 131081, 1376307, 3, 131081, 1376308, 3, 131081, 1376309, 3, 131081, 1376310, 3, 131081, 1376311, 3, 131081, 1376312, 3, 131081, 1376313, 3, 131081, 1376314, 3, 131081, 1376315, 3, 131081, 1376316, 3, 131081, 1376317, 3, 131081, 1376318, 3, 131081, 1376319, 3, 131081, 1376320, 3, 131081, 1376321, 3, 131081, 1376322, 3, 131081, 1376323, 3, 131081, 1376324, 3, 131081, 1376325, 3, 131081, 1376326, 3, 131081, 1376327, 3, 131081, 1376328, 3, 131081, 1376329, 3, 131081, 1376330, 3, 131081, 1376331, 3, 131081, 1376332, 3, 131081, 1376333, 3, 131081, 1376334, 3, 131081, 1376335, 3, 131081, 1376336, 3, 131081, 1376337, 3, 131081, 1376338, 3, 131081, 1376339, 2, 131083, 1441821, 3, 196616, 1441822, 3, 196617, 1441823, 3, 196617, 1441824, 3, 196617, 1441825, 3, 131077, 1441826, 3, 131081, 1441827, 3, 131081, 1441828, 3, 131081, 1441829, 3, 131081, 1441830, 3, 131081, 1441831, 3, 131081, 1441832, 3, 131081, 1441833, 3, 131081, 1441834, 3, 131081, 1441835, 3, 131081, 1441836, 3, 131081, 1441837, 3, 131081, 1441838, 3, 131081, 1441839, 3, 131081, 1441840, 3, 131081, 1441841, 3, 131081, 1441842, 3, 131081, 1441843, 3, 131081, 1441844, 3, 131081, 1441845, 3, 131081, 1441846, 3, 131081, 1441847, 3, 131081, 1441848, 3, 131081, 1441849, 3, 131081, 1441850, 3, 131081, 1441851, 3, 131081, 1441852, 3, 131081, 1441853, 3, 131081, 1441854, 3, 131081, 1441855, 3, 131081, 1441856, 3, 131081, 1441857, 3, 131081, 1441858, 3, 131081, 1441859, 3, 131081, 1441860, 3, 131081, 1441861, 3, 131081, 1441862, 3, 131081, 1441863, 3, 131081, 1441864, 3, 131081, 1441865, 3, 131081, 1441866, 3, 131081, 1441867, 3, 131081, 1441868, 3, 131081, 1441869, 3, 131081, 1441870, 3, 131081, 1441871, 3, 131081, 1441872, 3, 131081, 1441873, 3, 131081, 1441874, 3, 131081, 1441875, 2, 131083, 1507361, 3, 196616, 1507362, 3, 196617, 1507363, 3, 196617, 1507364, 3, 196617, 1507365, 3, 196617, 1507366, 3, 196617, 1507367, 3, 196617, 1507368, 3, 196617, 1507369, 3, 196617, 1507370, 3, 196617, 1507371, 3, 196617, 1507372, 3, 196617, 1507373, 3, 196617, 1507374, 3, 196617, 1507375, 3, 196617, 1507376, 3, 196617, 1507377, 3, 196617, 1507378, 3, 196617, 1507379, 3, 196617, 1507380, 3, 196617, 1507381, 3, 196617, 1507382, 3, 196617, 1507383, 3, 196617, 1507384, 3, 196617, 1507385, 3, 196617, 1507386, 3, 196617, 1507387, 3, 196617, 1507388, 3, 196617, 1507389, 3, 196617, 1507390, 3, 196617, 1507391, 3, 196617, 1507392, 3, 196617, 1507393, 3, 196617, 1507394, 3, 196617, 1507395, 3, 196617, 1507396, 3, 196617, 1507397, 3, 196617, 1507398, 3, 196617, 1507399, 3, 196617, 1507400, 3, 196617, 1507401, 3, 196617, 1507402, 3, 196617, 1507403, 3, 196617, 1507404, 3, 196617, 1507405, 3, 196617, 1507406, 3, 196617, 1507407, 3, 196617, 1507408, 3, 196617, 1507409, 3, 196617, 1507410, 3, 196617, 1507411, 2, 196619 )

[node name="Checkpoint" parent="." instance=ExtResource( 6 )]
position = Vector2( 743, 140 )

[node name="DarkZone" parent="." instance=ExtResource( 15 )]
light_mask = 2
position = Vector2( 3111, 411 )
scale = Vector2( 1.18638, 0.957634 )
z_index = 6

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="DarkZone"]
polygon = PoolVector2Array( -575.714, -286, -581.429, 146, -557.143, 402, 371.428, 444, 467.143, 402, 497.143, -328, -407.143, -314 )

[node name="Light2D" type="Light2D" parent="."]
position = Vector2( 3457, -270 )
scale = Vector2( 0.557496, 7.99062 )
texture = ExtResource( 20 )

[node name="Heart" parent="." instance=ExtResource( 23 )]
position = Vector2( 671, 336 )
